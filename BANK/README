#[kaken-26540170]
#NOTE:
##20150428 新手順に切り替え
##開始インデックス(イタレータ)まとめ
##C: 0
##perl: 0
##Mathematica: 1
##Matlab: 1
#検討事項:
##正解論文を集めてそこからパターンを抽出することを検討
#TODO:
##check: OK
###/BANK/PMC/20140724/Matching/BioResource/Organization/ATCC_2014 -> OK
###match_pos_AllResNames_Jour-ao.res がない。-> OK
##データのバックアップ: OK
##As of 20141013 -> OK
/mnt/EDB200/BANK/BioResource - OK
/mnt/EDB200/BANK/Organization - OK
/mnt/EDB200/BANK/PMC/20140724 - OK
/mnt/EDB200/BANK/PMC/20140724/Matching - OK
/mnt/EDB200/BANK/PMC/20140724/Matching/BioResource/Organization/ATCC_2014 - OK
/mnt/EDB200/BANK/PMC/20140724/Matching/BioResource/Organization/DSMZ_2014 - OK
/mnt/EDB200/BANK/PMC/20140724/Matching/BioResource/Organization/JCRB_2014 - OK
/mnt/EDB200/BANK/PMC/20140724/Matching/BioResource/Organization/NITE-NBRC_2014 -OK
/mnt/EDB200/BANK/PMC/20140724/Matching/BioResource/Organization/RIKEN-BRC_2012 - OK
/mnt/EDB200/BANK/PMC/20140724/Matching/BioResource/Organization/WDCM_2014 - 対象外
/mnt/EDB200/BANK/PMC/20140724/TAR - OK
/mnt/EDB200/BANK/PMC/20140724/articles - 対象外
/mnt/EDB200/BANK/PMC/20140724/articles.fname - OK
/mnt/EDB200/BANK/PMC/20140724/articles.pmid - OK
/mnt/EDB200/BANK/PMC/20140724/elements - OK
/mnt/EDB200/BANK/PMC/20140724/elements/ALL - OK
/mnt/EDB200/BANK/PMC/20140724/elements/MERGED - OK
/mnt/EDB200/BANK/PMC/20140724/elements/SKELTON - OK
/mnt/EDB200/BANK/PMC/20140724/elements/acknowledgement - OK
/mnt/EDB200/BANK/PMC/20140724/elements/aff - OK
/mnt/EDB200/BANK/PMC/20140724/elements/sec - OK
/mnt/EDB200/BANK/PMC/20140724/elements/sec-type - OK
/mnt/EDB200/BANK/PMC/20140724/elements/supplementary-material - OK
/mnt/EDB200/BANK/PMC/20140724/terms - OK
#ディレクトリ構成
- root: /BANK/
- XML情報: /BANK/PMC/<日付>/ 配下
- 機関情報: /BANK/Organization/<機関名_日付>/ 配下
- バイオリソース情報: /BANK/BioResource/Organization/<機関名_日付>/ 配下
- マッチング(検索)結果: /BANK/PMC/<日付>/Matching/BioResource/Organization/<機関名>/ 配下
- プログラム: github
- 実行スクリプト: 各 exec_command フォルダ
#PMC概観
- /BANK/PMC/20140724/articles : 54G, 843679 files
- /BANK/PMC/20140724/elements/SKELTON/skelton-ALL.res.tag-count.rep.merge-sort.count : 282タグ



#TASK(data) (随時更新) : データの基本情報をまとめる
##TASK(data.1):PMCファイルの展開
- 展開先: /BANK/PMC/20140724/articles
- check:
-- ファイル名リスト作成
cd /BANK/PMC/20140724/articles
find ./ -name *.nxml > /BANK/PMC/20140724/articles.fname/20/Jour-All.fname
-- 分割
cd /BANK/PMC/20140724/articles.fname/20
split -l 42183 Jour-All.fname Jour-split
##TASK(data.2):PMCファイルのチェック
cd /BANK/PMC/20140724/articles.fname/20.check/exec_command
./jour-check.aa.sh
##エラーゼロを確認。
##TASK(data.fname): ファイルネームのリスト作成
- dir : /BANK/PMC/20140724/articles.fname/20
##TASK(data.issn): ファイル vs. issn情報
- dir : /BANK/PMC/20140724/articles.issn
### 1. issnの摘出(20150405)
- 対象: /BANK/PMC/20140724/articles/*/*.nxml
- 対象ファイルリスト: /BANK/PMC/20140724/articles.fname/20/Jour-split.a[a-u]
- プログラム: /home/kamano/gitsrc/XMLOP/extract_issn.pl
- スクリプト: /BANK/PMC/20140724/articles.issn/exec_command/extract_issn.ALL.sh
- 結果: /BANK/PMC/20140724/articles.issn/Jour-split.issn.au
##TASK(data.pmid): ファイル vs. pmid情報
- dir : /BANK/PMC/20140724/articles.pmid
##TASK(data.title):  ファイル vs. title
- dir : /BANK/PMC/20140724/articles.title
### 1. アーティクルタイトルの抽出(20150226)
- プログラム: /home/kamano/gitsrc/XMLOP/extract_art-title_in_front.pl
- スクリプト: /BANK/PMC/20140724/articles.title/exec_command/jour-split.title.All.sh
- 結果: /BANK/PMC/20140724/articles.title/jour-split.title.au
##TASK(data.type):  ファイル vs. article-type
- dir : /BANK/PMC/20140724/articles.type
### 1. articletypeの摘出(20150405)
- 対象: /BANK/PMC/20140724/articles/*/*.nxml
- 対象ファイルリスト: /BANK/PMC/20140724/articles.fname/20/Jour-split.a[a-u]
- プログラム: /home/kamano/gitsrc/XMLOP/extract_art-type.pl
- スクリプト: /BANK/PMC/20140724/articles.type/exec_command/extract_art-type.ALL.sh
- 結果: /BANK/PMC/20140724/articles.type/Jour-split.arttype.au



#TASK(gather)
#XMLを少数のファイルにまとめる
#改行はすべてスペースに
- 対象: /BANK/PMC/20140724/articles/ 配下のnxml
-- 対象リスト: /BANK/PMC/20140724/articles.fname/20/Jour-split.a[a-u]
- プログラム: /home/kamano/gitsrc/utility/WSP_to_SP.pl
- スクリプト(2Hr): /BANK/PMC/20140724/articles.gather/20/exec_command/gather.ALL.sh
- 結果: /BANK/PMC/20140724/articles.gather/20/



#TASK(check): pmid/pmcidのチェック (20140724 に完了 -> ディレクトリ移動あり)
##TASK(check.pmcid): PMC-XMLよりpmcidを抽出
- 対象: /BANK/PMC/20140724/articles.pmid/
- プログラム: /home/kamano/gitsrc/XMLOP/extract_pmcid.pl
cd /BANK/PMC/20140724/articles.pmid/exec_command
/BANK/PMC/20140724/articles.pmid/exec_command/jour-split.pmcid.au.sh
##TASK(check.pmid): PMC-XMLよりpmidを抽出
- 対象: /BANK/PMC/20140724/articles.pmid/
- プログラム: /home/kamano/gitsrc/XMLOP/extract_pmid.pl
cd /BANK/PMC/20140724/articles.pmid/exec_command
/BANK/PMC/20140724/articles.pmid/exec_command/jour-split.pmid.aa.sh
##TASK(check.user-data-pmid): RIKEN-BRC利用者成果よりpmidを抽出(20140904 移動)
- 対象: /BANK/PMC/20140724/Matching/BioResource/Organization/RIKEN-BRC_2012/user-data/PMID/ALL.pmid.sort.uniq
##TASK(check.PMC_VS_user-data): RIKEN-BRC利用者成果pmid　PMC-XML_pmid　をマッチング(20140904 移動)
- ツール: Mathematica
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/RIKEN-BRC_2012/user-data/PMID/ALL.pmid.sort.uniq.in_pmc.hit



#TASK(element-tree)
##XMLのエレメント木を作成
- プログラム: /home/kamano/gitsrc/XMLOP/skelton.py
- 結果: /BANK/PMC/20140724/elements/SKELTON/*res
##各ジャーナルグループごとにタグをカウント
- プログラム: /home/kamano/gitsrc/utility/drop_colon.pl
- スクリプト: /BANK/PMC/20140724/elements/SKELTON/exec_command/tag-count-au.sh
- 結果: /BANK/PMC/20140724/elements/SKELTON/*res.tag-count
##マージのために余計なスペースを除去
- プログラム: /home/kamano/gitsrc/utility/rep4count.pl
- スクリプト: /BANK/PMC/20140724/elements/SKELTON/exec_command/rep_all.sh
- 結果: /BANK/PMC/20140724/elements/SKELTON/*res.tag-count.rep
##マージソート
- スクリプト: /BANK/PMC/20140724/elements/SKELTON/exec_command/merge-sort.sh
- 結果: skelton-ALL.res.tag-count.rep.merge-sort
##マージソートをカウント
- プログラム: /home/kamano/gitsrc/utility/sum_count_from_mixed_sort.pl
- スクリプト: /BANK/PMC/20140724/elements/SKELTON/exec_command/count_merge.sh
- 結果: skelton-ALL.res.tag-count.rep.merge-sort.count



#TASK(tag.new): XMLのエレメントタグを抽出・ソート・レベル付与(20150417完了)
- 対象: PMC-XML全件 (/BANK/PMC/20140724/articles/*/*nxml)
-- コメント中にタグがあるのでコメントを空白列に置き換える必要アリ。
- プログラム: /home/kamano/gitsrc/XMLOP/elementPos_sequence_flag-lv.pl
- スクリプト: /BANK/PMC/20140724/elements/ALL/exec_command/ALL_sort_pos_lv_rev-au.sh
- 結果: /BANK/PMC/20140724/elements/ALL/ALL_sort_pos_rev-au.reg+lv



#TASK(sec-type): sec-typeの種類を抽出
- ソース: /BANK/PMC/20140724/elements/sec/sec_pos-a[a-u].reg_sort
- プログラム: /home/kamano/gitsrc/XMLOP/grep-sec-type.pl
cd /BANK/PMC/20140724/elements/sec-type
/home/kamano/gitsrc/XMLOP/extract_sec-types.pl *reg_sort | sort | uniq -c > ALL_sec-type.sort.count
- 結果: /BANK/PMC/20140724/elements/sec-type/ALL_sec-type.sort.count.sort



#TASK(extract)
##TASK(extract.aff) : extract affiliation region
## -> 石川氏
- コンテンツ: /BANK/PMC/20140724/elements/aff/PMC-AFF-v1.tsv (20141114)
##TASK(extract.ack) :  extract acknowledgement region
## -> 石川氏
- コンテンツ: /BANK/PMC/20140724/elements/acknowledgement/PMC-ACK-v6_pmid.tsv
##TASK(extract.material) : extract *material* region ; (20140417)
##2段階で行なう: 1. ポインター情報作成, 2. ポインター情報を元にソースから抜き出す。
### 領域のポインター情報作成(20140417)
- 対象: /BANK/PMC/20140724/elements/ALL/ALL_sort_pos_rev-au.reg+lv
- プログラム: /home/kamano/gitsrc/XMLOP/extract_pos-tag-allmaterials.pl
 <*material*></>のリージョンを一発で取り出すスクリプト。
- スクリプト: /BANK/PMC/20140724/elements/MERGED/allmaterials/exec_command/extract_all-materials-reg_from_reg.sh
- 結果: /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg
### 領域抽出(20150417)
- 対象: /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg
- プログラム: /home/kamano/gitsrc/XMLOP/extract_content_from_reg_allmaterial.pl
 extract_pos-tag-allmaterials.pl の出力から、直接対象領域を取り出す。
-- example: /home/kamano/gitsrc/XMLOP/extract_content_from_reg_allmaterial.pl /BANK/PMC/20140724/articles /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg
- スクリプト: /BANK/PMC/20140724/elements/MERGED/allmaterials/exec_command/extract_cont_from_reg.au.sh
- コンテンツ: /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg.cont
## TASK(ACKファイル名取り出し)
cd /BANK/PMC/20140724/elements/acknowledgement
- 対象ack: /BANK/PMC/20140724/elements/acknowledgement/PMC-ACK-v6_pmid.tsv
- nxmlファイル名取り出し: 
awk -F '	' '{print $2}' PMC-ACK-v6_pmid.tsv | sed -e 's/^PMC\///' > PMC-ACK-v6_pmid.nxmlName
## TASK(Matのファイル名取り出し)
cd /BANK/PMC/20140724/elements/MERGED/allmaterials/
- 対象mat: /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg.cont
- nxmlファイル取り出し:
cat *cont | awk -F '	' '{print $1}' | sed -e 's/^\/BANK\/PMC\/20140724\/articles\///'  > allmaterials.nxmlNames
## TASK(extract.xref): xrefを含む直上位のレベルを抜き出す。
### 1. xrefと直上タグのポジションを抜き出し、必要なxref部分を特定、特定領域をプリント ver.2 (20150417)
#### 1.1 xrefと直上タグのポジションを抜き出す (20150417)
- 対象: /BANK/PMC/20140724/elements/ALL/ALL_sort_pos_rev-au.reg+lv
- プログラム: /home/kamano/gitsrc/XMLOP/extract_pos_xref_lv_in_body.pl /BANK/PMC/20140724/elements/ALL/ALL_sort_pos_rev-au.reg+lv
 タグが正しく閉じられるかの情報をプリント。
- スクリプト: /BANK/PMC/20140724/elements/x+ref+p/exec_command/extract_reg-lv_xref-p-sec_in_body.sh
- 結果: /BANK/PMC/20140724/elements/x+ref+p/reg-lv_xref-p-sec_in_body-au
#### 1.2 xrefと直上タグのポジションよりbibrを抜き出す (20150417)
- 対象: /BANK/PMC/20140724/elements/x+ref+p/reg-lv_xref-p-sec_in_body-au
- プログラム: /home/kamano/gitsrc/XMLOP/extract_bibr_from_pos_xref_lv.pl
- スクリプト: /BANK/PMC/20140724/elements/x+ref+p/exec_command/extract_bibr_from_xref-p-sec.sh
- 結果: /BANK/PMC/20140724/elements/x+ref+p/reg-lv_xref-p-sec_in_body-au.bibr
#### 1.3 xrefと直上タグのポジションとbibr情報より除外すべきデータを除外する (20150417)
- 対象: /BANK/PMC/20140724/elements/x+ref+p/reg-lv_xref-p-sec_in_body-au.bibr
- プログラム: /home/kamano/gitsrc/XMLOP/exclude_from_rev-lv.pl
- スクリプト: /BANK/PMC/20140724/elements/x+ref+p/exec_command/exclude_from_rev-lv-bibr.sh
- 結果: /BANK/PMC/20140724/elements/x+ref+p/reg-lv_xref-p-sec_in_body-au.bibr.exc
#### 1.4 対象領域の抜きだし(20150417)
- 対象: /BANK/PMC/20140724/articles/*/*.nxml
- 対象ファイルリスト: Jour-split.a[a-u]
- 領域情報: /BANK/PMC/20140724/elements/x+ref+p/reg-lv_xref-p-sec_in_body-au.bibr.exc
- プログラム: /home/kamano/gitsrc/XMLOP/extract_content_xref_from_reg-lv.pl
-- プログラム中で呼び出される外部プログラム: /usr/local/bin/streamcut
- スクリプト: /BANK/PMC/20140724/elements/x+ref+p/exec_command/extract_content_xref_from_reg-lv.sh
- 結果: /BANK/PMC/20140724/elements/x+ref+p/reg-lv_xref-p-sec_in_body-au.bibr.exc.cont
### [特別タスク] 2. 対象論文を 雑誌(心臓病学)とarticle-type(原著論文)で絞る
- 結果: /BANK/PMC/20140724/elements/x+ref+p/targeted/target_cont.au
##TASK(extract.ref) : xrefを含むp領域のextract、対応するref領域のextract
### 1. xrefを含むp領域のextract
- プログラム: /home/kamano/gitsrc/XMLOP/region-xrefINp_from_XML.pl
- スクリプト: /BANK/PMC/20140724/elements/x+ref+p/exec_command/content_xrefINp_Jour-ALL.sh
- 結果: /BANK/PMC/20140724/elements/x+ref+p/content_xrefINp_Jour-au
### 2. 対応するref領域のextract
対象ファイル: content_ref_Jour-a*
- プログラム: /home/kamano/gitsrc/XMLOP/region-ref_from_XML.pl
- スクリプト: /BANK/PMC/20140724/elements/x+ref+p/exec_command/content_ref_Jour-ALL.sh
- 結果: /BANK/PMC/20140724/elements/x+ref+p/content_ref_Jour-au



#TASK(term-count): 出現タームのsplit・カウント
##TASK(term-count.ALL_ALL):タグ含む
### (split pattern 0)
- デリミター: /usr/local/var/perl_word_delimiter.patt
- スクリプト: /BANK/PMC/20140724/terms/ALL/patt.0/exec_command/extract_1W_Jour-au.sh (のちにディレクトリ名変更のため無効)
- 結果: /BANK/PMC/20140724/terms/ALL/patt.0/Word_Jour-au.sort.uniq.rep
- 全集計結果: /BANK/PMC/20140724/terms/ALL/patt.0/Word_Jour-All.merge.count.nsort
##TASK(term-count.ELM_VAL_ALL):タグ含まない
### (split pattern 1; single term) (20160804)
cd /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1
- README: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/exec_command/README
- プログラム:
-- /home/kamano/gitsrc/XMLOP/drop_any_tag_LF.pl
- スクリプト:
-- 0. cd /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/exec_command
-- 1. split_Word_Jour-ALL.sh
-- 2. sort_each_W_Jour-ALL.sh
-- 3. sort_ALL_W_presort_Jour-ALL.sh
-- 4. sort-count_ALL_W_Jour-ALL.sh
- result: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Word_jour-ALL.sort.count
### (split pattern 1; 2W-phrase)
cd /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1
- README: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/exec_command/README
- プログラム:
-- /home/kamano/gitsrc/XMLOP/drop_tag-text_LF.pl
-- /home/kamano/gitsrc/XMLOP/phrase_splitter1.pl
-- /home/kamano/gitsrc/utility/split_phrase2W.pl
-- /home/kamano/gitsrc/utility/select_phrase2W.pl
-- /home/kamano/gitsrc/utility/sum_count_from_mixed_phrase_sort.pl
- スクリプト:
-- 0. cd /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/exec_command
-- 1. ./split_Phrase_Jour-ALL.sh
-- 2. ./select_phrase2W.sh
-- 3. ./sort_each_2W_Jour-ALL.sh
-- 4. ./sort_ALL_2W_presort_Jour-ALL.sh #20min
-- 5. ./sort-count_ALL_2W_Jour-ALL.sh #10min
- result: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.2W.sort.count
### (split pattern 1; 3W-phrase)
cd /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1
- README: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/exec_command/README
- プログラム:
-- /home/kamano/gitsrc/XMLOP/drop_tag-text_LF.pl
-- /home/kamano/gitsrc/XMLOP/phrase_splitter1.pl
-- /home/kamano/gitsrc/utility/split_phrase3W.pl
-- /home/kamano/gitsrc/utility/select_phrase3W.pl
-- /home/kamano/gitsrc/utility/sum_count_from_mixed_phrase_sort.pl
- スクリプト:
-- 0. cd /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/exec_command
-- 1. 実行済み
-- 2. ./select_phrase3W.sh
-- 3. ./sort_each_3W_Jour-ALL.sh
-- 4. ./sort_ALL_3W_presort_Jour-ALL.sh
-- 5. ./sort-count_ALL_3W_Jour-ALL.sh
- result: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.3W.sort.count

### (split pattern 3): OLD
#### タグの除去とsplit
- プログラム:
-- /home/kamano/gitsrc/XMLOP/drop_tag-text.pl
-- /home/kamano/gitsrc/XMLOP/splitter3.pl
- スクリプト: /BANK/PMC/20140724/terms/whole/patt.3/exec_command/split_Word_Jour-ALL.sh
- 出力ファイル: /BANK/PMC/20140724/terms/whole/patt.3/Word_Jour-au

##TASK(term-count.allmaterials)
### (split pattern 1)
#### 各ファイルのtag除去, split, sort, uniq, count
- 対象: /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg.cont
- プログラム: 
-- /home/kamano/gitsrc/utility/drop_1ST-col_from_TSV.pl
-- /home/kamano/gitsrc/XMLOP/drop_tag-text.pl
-- /home/kamano/gitsrc/XMLOP/splitter1.pl
- スクリプト例: /home/kamano/gitsrc/utility/drop_1ST-col_from_TSV.pl /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg.cont | /home/kamano/gitsrc/XMLOP/drop_tag-text.pl | /home/kamano/gitsrc/XMLOP/splitter1.pl | tr '	' '\n' | sort |uniq -c > /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/allmaterials.au.sort.uniq.count
- スクリプト(5 min): /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/exec_command/split-sort-count.sh
- 結果: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/allmaterials.au.sort.uniq.count
#### すべてのファイルのcount結果をマージ
##### すべてのファイルをマージ、タームでソート
- プログラム: /home/kamano/gitsrc/utility/rep4count.pl
- スクリプト: cat /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/allmaterials.*.sort.uniq.count | /home/kamano/gitsrc/utility/rep4count.pl | sort -t '	' -k2 > /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/ALL.merge
- 結果: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/ALL.merge
##### マージ結果を集計
- プログラム: /home/kamano/gitsrc/utility/sum_count_from_mixed_sort.pl
- スクリプト: /home/kamano/gitsrc/utility/sum_count_from_mixed_sort.pl /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/ALL.merge > /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/ALL.merge.sort.count
- 結果: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/ALL.merge.sort.count
#### 空文字列を削除(手動)
- 対象: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/ALL.merge.sort.count
- スクリプト: vim /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/ALL.merge.sort.count
- 結果: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1/ALL.merge.sort.count
#### 検索用のターム作成
##### 拡張子の使い方
- .<n>E : (Extract)、対象
- .<n>D : (Delete)、対象外
- <n> : シークエンス番号
##### ディレクトリ移動
- ディレクトリ移動:  cd /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.1
##### 出現が1のタームを除去
- スクリプト:
 grep -v '^1 ' ALL.merge.sort.count.sort > ALL.merge.sort.count.sort.1E
##### 出現が多いタームを除去
- HeLa : 24084
- threshold : 40000
- 境界 : 40012 v/v
- スクリプト:
 cp ALL.merge.sort.count.sort.1E ALL.merge.sort.count.sort.2E
 vim ALL.merge.sort.count.sort.2E
##### delete terms which contain double-quote
- スクリプト: grep -v \" ALL.merge.sort.count.sort.2E > ALL.merge.sort.count.sort.3E
##### 出現が2のタームを除去
- スクリプト: grep -v '^2 ' ALL.merge.sort.count.sort.3E > ALL.merge.sort.count.sort.4E
##### 文頭が "#" (シャープ) のタームを除去
- スクリプト: grep -E -v '^[0-9]+ #' ALL.merge.sort.count.sort.4E > ALL.merge.sort.count.sort.5E
##### 文頭が "$" (ダラー) のタームを除去
- スクリプト: grep -E -v '^[0-9]+ \$' ALL.merge.sort.count.sort.5E > ALL.merge.sort.count.sort.6E
##### 文頭が "!" (エクスクラメーション) のタームを除去
- スクリプト: grep -E -v '^[0-9]+ !' ALL.merge.sort.count.sort.6E > ALL.merge.sort.count.sort.7E
##### 文頭が "%" (パーセント) のタームを除去
- スクリプト: grep -E -v '^[0-9]+ %' ALL.merge.sort.count.sort.7E > ALL.merge.sort.count.sort.8E
##### 文頭が "'" (ダッシュ) のタームを除去
- スクリプト: grep -E -v "^[0-9]+ '" ALL.merge.sort.count.sort.8E > ALL.merge.sort.count.sort.9E
##### 文頭が "*" (アスタリスク) のタームを除去
- スクリプト: grep -E -v "^[0-9]+ \*" ALL.merge.sort.count.sort.9E > ALL.merge.sort.count.sort.10E
##### 文頭が "+" (プラス) のタームを除去
- スクリプト: grep -E -v "^[0-9]+ \+" ALL.merge.sort.count.sort.10E > ALL.merge.sort.count.sort.11E
##### 文頭が "-" (マイナス) のタームを除去
- スクリプト: grep -E -v "^[0-9]+ -" ALL.merge.sort.count.sort.11E > ALL.merge.sort.count.sort.12E
##### 文頭が "/" (スラッシュ) のタームを除去
- スクリプト: grep -E -v "^[0-9] /" ALL.merge.sort.count.sort.12E > ALL.merge.sort.count.sort.13E
##### 小文字子数字1文字のタームを除去
- スクリプト: grep -E -v "^[0-9]+ [0-9a-z]$" ALL.merge.sort.count.sort.13E > ALL.merge.sort.count.sort.14E
##### 小文字子数字2文字のタームを除去
- スクリプト: grep -E -v "^[0-9]+ [0-9a-z][0-9a-z]$" ALL.merge.sort.count.sort.14E > ALL.merge.sort.count.sort.15E
#####(20150731)#####
### (split pattern 4)
#### 各ファイルのtag除去, split, sort, uniq, count
- cd /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4
- プログラム:
-- /home/kamano/gitsrc/utility/drop_1ST-col_from_TSV.pl
-- /home/kamano/gitsrc/XMLOP/drop_tag-text.pl
-- /home/kamano/gitsrc/XMLOP/splitter4.pl
- スクリプト例: /home/kamano/gitsrc/utility/drop_1ST-col_from_TSV.pl /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg.cont | /home/kamano/gitsrc/XMLOP/drop_tag-text.pl | /home/kamano/gitsrc/XMLOP/splitter4.pl | tr '	' '\n' | sort |uniq -c > /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/allmaterials.au.sort.uniq.count
- スクリプト: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/exec_command/split-sort-count.sh
#### すべてのファイルのcount結果をマージ
##### すべてのファイルをマージ、タームでソート
- プログラム: /home/kamano/gitsrc/utility/rep4count.pl
- スクリプト: cat /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/allmaterials.*.sort.uniq.count | /home/kamano/gitsrc/utility/rep4count.pl | sort -t '	' -k2 > /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/ALL.merge
##### マージ結果を集計
- プログラム: /home/kamano/gitsrc/utility/sum_count_from_mixed_sort.pl
- スクリプト: /home/kamano/gitsrc/utility/sum_count_from_mixed_sort.pl /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/ALL.merge > /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/ALL.merge.sort.count
#### 空文字列を削除
- /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/ALL.merge.sort.count
- 結果: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/ALL.merge.sort.count
#### perl検索用のターム作成
- 対象: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/ALL.merge.sort.count
##### カウントを消去
- スクリプト:  sed -e 's/^[^ ]* //;' ALL.merge.sort.count > terms.search.pre
##### 1文字、極端に長いタームを削除
- プログラム: /home/kamano/gitsrc/utility/drop_suspicius-length.pl
- スクリプト: /home/kamano/gitsrc/utility/drop_suspicius-length.pl terms.search.pre > terms.search
##### 特殊文字をエスケープ
- プログラム: escape_char
- スクリプト: escape_char sf=/BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/terms.search lf=/usr/local/var/perl_esc.list > /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/terms.search.esc
- 結果: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/terms.search.esc



#TASK(1): 既知バイオリソース名・機関名の決定と検索タームの定義 (NBRP機関とする)
##TASK(1.1): パターン定義用既知機関名決定 -> 石川氏
###TASK(1.1.1): 既知機関英名シノニム決定 -> 石川氏
###石川氏 -> 水野氏に指示 (20150610)
###上位機関を単位とする、ただし、下部機関も上位機関のシノニムとする
- 手順書: /BANK/Organization/NBRP_2015/tejun-sho_201507.ods
- 日本語機関名リスト(NBRPオリジナル): /BANK/Organization/NBRP_2015/nbrp.organization-names.J.20150409
- 日本語正式機関名リスト(水野氏): /BANK/Organization/NBRP_2015/orgnames-jp_eng.csv
- 上ファイルのsortuniq(20150616): /BANK/Organization/NBRP_2015/orgname_jp.sort.uniq
- 上ファイルの英語名対応表: /BANK/Organization/NBRP_2015/17orgs_jp_eng.csv
- 機関名和英対応表のURL(NISTEP): http://www.nistep.go.jp/research/scisip/randd-on-university
- 実際に使用する和英対応表ファイル(WoS): /BANK/NISTEP/name_variations_WoS_Ver2014_1.utf8.txt
- 実際に使用する和英対応表ファイル(scopus): /BANK/NISTEP/name_variations_scopus_ver_2013_1.utf8.csv
- 日本語正式名にマッチさせるスクリプト: while read ln ; do grep $ln /BANK/NISTEP/name_variations_WoS_Ver2014_1.utf8.txt; done < orgname_jp.sort.uniq > /BANK/Organization/NBRP_2015/17toporg_in_WoS.csv
- WoSより日本名マッチした17機関: /BANK/Organization/NBRP_2015/17toporg_in_WoS.csv
- scopusより日本名マッチした17機関: /BANK/Organization/NBRP_2015/17toporg_in_scopus.csv
- (1) dictionaly(organization_dictionary_ver_2014_1.utf8.insTAB.txt)より下部機関含むNBRP機関英名抽出:
-- 対象ファイル: /BANK/NISTEP/organization_dictionary_ver_2014_1.utf8.insTAB.txt
-- 下部機関を含むIDと日本語名を抽出: 
cd /BANK/NISTEP;
while read org ; do grep $org organization_dictionary_ver_2014_1.utf8.insTAB.txt; done < /BANK/Organization/NBRP_2015/orgname_jp.sort.uniq | awk -F'	' '{print $1"\t"$4}' | sort | uniq > /BANK/Organization/NBRP_2015/NBRP-IDvsOrg
-- 名称空欄を手作業で除去
-- IDのみ抽出:
cd /BANK/Organization/NBRP_2015
awk -F'   ' '{print $1}' NBRP-IDvsOrg > NBRP-ID
-- NBRP-IDをもとに英名を抜きだし:
grep "\t" NBRP-IDvsEnName > /BANK/Organization/NBRP_2015/NBRP-IDvsEnName_fromDict.dropEMP
-- 辞書、WoS、Scopusを合わせた最上位機関英名シノニムvs機関ID(20150707)(最終ファイル): /BANK/Organization/NBRP_2015/IDtopd9oksotods7okodssort17toporg_in_scopus.WoS.dic.m.s.csv.sort.csv
- (2) 下部機関リスト(86ce721f7f57938f73eab01b25d00ea1_sheet2.utf8.txt)より下部機関含むNBRP機関英名抽出:
cd /BANK/NISTEP
while read org; do grep $org 86ce721f7f57938f73eab01b25d00ea1_sheet2.utf8.txt; done < /BANK/Organization/NBRP_2015/orgname_jp.sort.uniq > /BANK/Organization/NBRP_2015/extractNBRPname_fromSheet2 (最終ファイル)
- (3) 検索ターム
-- 依頼: 水野氏中間ファイル(20150623): /BANK/Organization/NBRP_2015/3OK 17toporg_in_scopus.WoS.dic.m.s.ods
-- 依頼: 上記ファイルより重複英名を削除、他のカラムに違う値が入っている場合はどれかを残す
--- プログラム: /BANK/Organization/NBRP_2015/drop_multi_name.pl
--- 結果(ソートなし): /BANK/Organization/NBRP_2015/17toporg_in_scopus.WoS.dic.m.s.csv.dropDup
--- スクリプト(5からむ目でソート): sort -t'	' '3OK 17toporg_in_scopus.WoS.dic.m.s.csv' -k4 | /BANK/Organization/NBRP_2015/drop_multi_name.pl > /BANK/Organization/NBRP_2015/17toporg_in_scopus.WoS.dic.m.s.csv.sort.dropDup
--- 結果(5からむ目でソート): /BANK/Organization/NBRP_2015/17toporg_in_scopus.WoS.dic.m.s.csv.sort.dropDup
--- 上記に対してさらに別からむでソートドロップ 
--- スクリプト: sort -t'       ' -k2 /BANK/Organization/NBRP_2015/17toporg_in_scopus.WoS.dic.m.s.csv.sort.dropDup | /BANK/Organization/NBRP_2015/drop_multi_name.pl > /BANK/Organization/NBRP_2015/17toporg_in_scopus.WoS.dic.m.s.csv.sort.dropDupx2
--- 結果ファイル: /BANK/Organization/NBRP_2015/17toporg_in_scopus.WoS.dic.m.s.csv.sort.dropDupx2
-- 上記に対してハンドサーチで上位機関名決定(20150702): /BANK/Organization/NBRP_2015/9oksotods17toporg_in_scopus.WoS.dic.m.s.csv.sort.dropDupx2
-- 上記に対して第5カラムを抜粋: /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm
-- 上記に対して先頭と末尾のスペースを除去: /home/kamano/gitsrc/utility/drop_headtailSP.pl 17topOrgNameSearchTerm > /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt
-- 最終的に検索するターム(NBRP-ORGコレクション): /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq
-- 最終的に検索するターム(perl用エスケープ)(NBRP-ORG-Perlコレクション): /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq.esc
##TASK(1.2) パターン定義用既知バイオリソース名決定(20140423)
###TASK(1.2.1) NBRC利用者成果からバイオリソース名+請求番号を抜き出す(20140420)
- 利用者成果ファイル: /BANK/BioResource/Organization/NBRP_2015/user-data/reference_list.tsv
- Resource name カラムを抜き出したもの: /BANK/BioResource/Organization/NBRP_2015/user-data/Resnames.line
- さらに個別のリソースに分割: /BANK/BioResource/Organization/NBRP_2015/user-data/Resnames
-- ", " (<カンマ><スペース>)で区切る
-- "; " (<セミコロン><スペース>)で区切る
-- プログラム: /home/kamano/gitsrc/utility/CM-SP_SC-SP_to_LF.pl
-- "," カッコ内でなければ(<カンマ>)で区切る
-- プログラムソース: /home/kamano/gitsrc/utility/CM_to_LF_out_Bracket_line.c
-- スクリプト: /home/kamano/gitsrc/utility/CM-SP_SC-SP_to_LF.pl Resnames.line | /home/kamano/gitsrc/utility/CM_to_LF_out_Bracket_line if=/dev/stdin > Resnames
-- リフォーム: sed -e 's/^\s+//' Resnames | sed -e 's/\s+$//' > Resnames.re
- リストをリソースネーム vs. リソース番号の形に整形
-- プログラム: /home/kamano/gitsrc/utility/divide_lastBRK.pl
-- 結果: /BANK/BioResource/Organization/NBRP_2015/user-data/ResnameVSid
###TASK(1.2.2): 既知バイオリソース検索シノニム+ID決定
- 対象: /BANK/BioResource/Organization/NBRP_2015/user-data/ResnameVSid
- ソートユニークカウント: /BANK/BioResource/Organization/NBRP_2015/user-data/ResnameVSid.sort.uniq.count
- リフォーム: ./reform_sort-uniq-count.pl ResnameVSid.sort.uniq.count > ResnameVSid.sort.uniq.count.re
- 文頭の空タームを除去: /BANK/BioResource/Organization/NBRP_2015/user-data/ResnameVSid.sort.uniq.count.re
###TASK(1.2.3) 既知バイオリソース検索タームの絞り込み(行なわない)
###materialおよびacknowledgementの出現タームを既知バイオリソース検索シノニムにヒットさせ、ヒットとなったバイオリソースを実際の検索タームとする。
###出現タームがリソース名のサブストリングであることを期待している。
###結局、ほとんどすべてのサブストリングにマッチしてしまい、意味が無かった。(20140422)
###TASK(1.2.4) バイオリソース名+請求番号を検索用タームにばらし、例外的なタームを除去
####シノニム+IDを検索タームにばらす
- cd /BANK/BioResource/Organization/NBRP_2015/user-data
- awk -F'	' '{print $2}' ResnameVSid.sort.uniq.count.re > resterms.search.pre
- awk -F'	' '{print $3}' ResnameVSid.sort.uniq.count.re >> resterms.search.pre
- ./exec_command/reform_resterms.pl resterms.search.pre > resterms.search.pre.re
- sort resterms.search.pre.re | uniq > resterms.sort.uniq
- 検索ターム: /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq
####極端に短い、長いネームを除去
- プログラム: /BANK/BioResource/Organization/NBRP_2015/user-data/exec_command/drop_suspicius-length.pl
- 検索ターム候補: /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.1
####material出現タームがサブ文字列になっているバイオリソースネーム(いみなし)
- 対象: /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.1
- サブ文字列: /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/terms.search.esc
- プログラム: /home/kamano/gitsrc/utility/match_substr.pl
- スクリプト: /home/kamano/gitsrc/utility/match_substr.pl /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.1 /BANK/PMC/20140724/terms/MERGED/allmaterials/patt.4/terms.search.esc > /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.1.allmaterials-hit
####acknowledgement出現タームがサブ文字列になっているバイオリソースネーム
####行なわない
###TASK(1.2.5)最終的に使う検索タームのマニュアルチューニング
####中間ファイル: <n>E、<n>D、<n>m、kwのサフィクスを使用、<n>は番号、Eはextract、Dはdelete
- 作業詳細: /BANK/BioResource/Organization/NBRP_2015/user-data/README
 生物種名については全て残す。
-- 作業対象ファイル: /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.1
-- 結果ファイル(20150710): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_3
-- 結果ファイル(20150728): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5
-- C検索用結果ファイル(ncr): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr
-- Perl検索用結果ファイル(ncr,escape): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr.esc



#TASK(2): 既知バイオリソース名・既知機関名の出現状況確認(NBRP)
#4段階で行なう: a.機関名hit論文の抽出 b.さらにリソース名hitの論文抽出 c.文字色挿入 d. センテンスsplit
#試験 -> 採用 -> 修正(20150729) -> OK(20150729)
#修正状況: n-column以降をスキャンする処理に変更(20150729) <- カラム数が同じだと勘違いしていた。修正終了には<R> 。 -> OK(20150729)
#リソース名出現確認:
#前後のn文字を含めリソース名抽出
- 実行ファイル: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/exec_TASK2_all.sh
--> 失敗。 waitしてもつぎのスクリプトが実行される。
--> waitは段階的に呼び出されるプロセスに対応していない。--> スクリプト修正完了
--> 現在、いくつかのファイルが壊れたまま。--> 修正中 --> OK
--> まだ実行していない。
##TASK(2.0)準備
###TASK(2.0.0)検索タームの特殊文字エスケープ
####機関名
- エスケープコマンド: escape_char sf=/BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt lf=/usr/local/var/perl_esc.list > /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.esc
- ほんとは、こっちのファイルを使う: /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq.esc
####リソース名
- ncrコマンド: utf8_to_ncr /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5 > /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr
- エスケープコマンド: escape_char sf=/BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr lf=/usr/local/var/perl_esc.list > /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr.esc
###TASK(2.0.1) a. 機関名hit論文の抽出 in ACK
- 検索対象: /BANK/PMC/20140724/elements/acknowledgement/PMC-ACK-v6_pmid.tsv
 3カラム以降に対して検索
- 検索ターム(スケープ): /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.esc
- プログラム: /home/kamano/gitsrc/utility/hit_least.pl
- スクリプト(5 min): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/hit_Org_from_ACK.sh
- 結果(NBRP-ACKセレクション): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv
###TASK(2.0.2) b. リソース名hitの確認抽出 in ACK with 機関名
- 検索対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv
- 検索ターム(エスケープ): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_4.ncr.esc
- プログラム: /home/kamano/gitsrc/utility/hit_least.pl
- スクリプト(5 min): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/hit_ResOrg_from_ACK.sh
- 結果(20150729): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv
###TASK(2.0.3) a. 機関名hit論文の抽出 in Mat
- 検索対象: /BANK/PMC/20140724/elements/MERGED/allmaterials/*.cont
 2カラム以降に対して検索
- 検索ターム(スケープ済み): /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.esc
- プログラム: /home/kamano/gitsrc/utility/hit_least.pl
- スクリプト(3 min): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/hit_Org_from_Mat.sh
- 結果(NBRP-Matセレクション): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_Mat.a[a-u].tsv
###TASK(2.0.4) b. リソース名hitの確認抽出 in Mat with 機関名
- 検索対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_Mat.a[a-u].tsv
- 検索ターム(エスケープ済み): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr.esc
- プログラム: /home/kamano/gitsrc/utility/hit_least.pl
- スクリプト(1 min): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/hit_ResOrg_from_Mat.sh
- 結果(20150728): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_Mat.au.tsv
##TASK(2.1) 既知機関名・リソース名同時出現(NBRP)検索(文字色挿入)
###TASK(2.1.1) c. 既知機関名文字色挿入 in ACK
- 対象(ソース): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv
- 検索ターム(エスケープ済み): /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.esc
- プログラム: /home/kamano/gitsrc/XMLOP/insTxColor_to_html.pl
- スクリプト: /home/kamano/gitsrc/XMLOP/insTxColor_to_html.pl src=/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv clm=2 trm=/BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.esc clr=red > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv.color1
- 結果(NBRP-ACKセレクション): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv.color1
###TASK(2.1.2) c. バイオリソース名文字色挿入 in ACK
- 対象(すでに機関名の処理が終わったもの): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv.color1
- 検索ターム(ncr、エスケープ済み): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr.esc
- プログラム: /home/kamano/gitsrc/XMLOP/insTxColor_to_html.pl
- スクリプト(15 min): time /home/kamano/gitsrc/XMLOP/insTxColor_to_html.pl src=/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv.color1 clm=2 trm=/BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr.esc clr=blue > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv.color2
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv.color2
###TASK(2.1.3) c. 既知機関名文字色挿入 in Mat
- 対象(ソース): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_Mat.au.tsv
- 検索ターム(エスケープ済み): /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.esc
- プログラム: /home/kamano/gitsrc/XMLOP/insTxColor_to_html.pl
- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/insTxColor_Org_in_Mat.sh
- 結果(NBRP-Matコレクション): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_Mat.au.tsv.color1
###TASK(2.1.4) c. バイオリソース名文字色挿入 in Mat (20150728)
- 対象(すでに機関名の処理が終わったもの): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_Mat.au.tsv.color1
- 検索ターム(ncr、エスケープ済み): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr.esc
- プログラム: /home/kamano/gitsrc/XMLOP/insTxColor_to_html.pl
- スクリプト(10 min): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/insTxColor_Res_in_Mat.sh
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_Mat.au.tsv.color2
###TASK(2.1.5) d. センテンスsplit & html化(プログラムによる) (20150804)
- 対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from*color2
- プログラム: /home/kamano/gitsrc/XMLOP/extract_hit_sentence_from_colored.pl
- スクリプト(ACK): /home/kamano/gitsrc/XMLOP/extract_hit_sentence_from_colored.pl src=/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv.color2 clm=2 terms=red,blue > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_ACK.tsv.color2.sel.html
- スクリプト(Mat): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/select_from_colored_Mat.sh
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_*color2.sel.html
###TASK(2.1.6) htmlより空のレコードを除去 (20150804)
- 対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_*color2.sel.html
- プログラム: /home/kamano/gitsrc/XMLOP/drop_empty_hit_from_html.pl
- スクリプト: 
 cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015
 for file in *color2.sel.html; do  /home/kamano/gitsrc/XMLOP/drop_empty_hit_from_html.pl $file > ${file%.html}.dropE.html; done
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_*color2.sel.dropE.html
-- 問題点: タグ内のResにマッチ、タグの破壊が起こっている。-> ar: [399] /BANK/PMC/20140724/articles/PLoS_Pathog/PLoS_Pathog_2007_Nov_23_3(11)_e173.nxml
- 集計結果:
-- センテンス:
grep nxml *dropE.html | wc
   1258  213409 2648070
-- 論文:
grep -o '<;/>' *dropE.html | wc
   1312    1312   69912
-- Res: 
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015
./exec_command/extract_HitRes_from_dropE.pl *dropE.html | ./exec_command/extract_blueFontStr_from_HitRes.pl | sort | uniq | wc
    327     376    2501
-- Org:
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015
./exec_command/extract_HitOrg_from_dropE.pl *dropE.html | ./exec_command/extract_redFontStr_from_HitRes.pl | sort | uniq | wc
     32      89     699
###(20150730)完了###
###TASK(2.1.7) d. 機関名、バイオリソース名が同時出現するセンテンス(ピリオド区切り、場合によってはカンマ、セミコロン区切り)を人手で抜きだし(水野氏実行完了)
- 対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_ResOrg_from_*.tsv.color2.sel.dropE.html
- 手順
-- 手作業で抜きだし
-- スクリプトでチェック
--- チェック法: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/README
--- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/reformResOrgWork.pl
-- 以上を繰り返し、収束
- 作業ファイル: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/ 配下
-- 1回目: hit_ResOrg.tsv.color2.sel.html.work.20140929.csv
-- 2回目: hit_ResOrg.tsv.color2.sel.html.work.20151007.csv
-- 3回目: hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref
-- チェック:
--- (1) エラーを抜きだし
--- (2) ;Eフラグ付きを抜きだし
---- スクリプト:
awk -F '	' '{print $7}' hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv > check_7.E.20151015
----- 行番号挿入
vim check_7.E.20151015
:%s/^/\=line('.').'^I'/
grep ';E' check_7.E.20151015 > check_7.E.20151015.E
--- (3) 1の要素がすべて(2)によってeditされていればOK
- 修正結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev
- 結果の編集(1):本文中のリソースにマーク、シングルライン化: 
-- スクリプト: reformResOrgWorkMark.pl hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev | toSingleLine.pl > hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.Mark.S
- 結果の編集(2):ACK or Mat ラベル付与: vimで編集
-- フォーマットの説明:
--- 対象のnxmlごとの結果行(各1行) + アノテーション行
--- 対象行: <タブ>ではじまる
--- 各行におけるセンテンスレコード区切り: <タブ><セミコロン><セミコロン><タブ>
--- レコードセンテンスの構成: <レコードID>、<コンテンツ>、<ヒットリソース>、<ヒット組織名>、<ヒットの順番>、<備考>、<質問>の<タブ>区切り
--- <リソース名>と<組織名>の区切り: <スペース><セミコロン><スペース>
- 最終結果(キュレーテッドコアコレクション:CCC): /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.Mark.E.S.L
- 結果の集計情報
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- 全論文数
grep '^	' hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.Mark.E.S | wc
    954   39533  365305
-- センテンス数:
--- Total
grep '^		' hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev | wc
    983   36238  256870
--- <ACK>
grep 'ACK			' hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.L | wc
    246   10376   71610
--- <Mat>
grep 'Mat			' hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.L | wc
    737   26845  189192

###TASK(2.1.8) 機関名、バイオリソース名が同時出現するセンテンスのパターン解析
- 対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.Mark.E.S.L
#### 集計1 : </RES>...<ORG> or </ORG>...<RES> 間、単語数ごとの集計
- パターン集計結果のまとめ: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/analysis/pattern-bunseki-kekka (図書館総合展)
#### 集計2 : </RES>...<ORG> or </ORG>...<RES> 間の単語数制限なし (20160801)
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/
- RES-ORG@Mat
-- プログラム: /home/kamano/gitsrc/XMLOP/extract_region_RES-ORG.pl
-- スクリプト: grep ^Mat hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.Mark.E.S.L | awk -F '	' '{print $6}' | /home/kamano/gitsrc/XMLOP/extract_region_RES-ORG.pl > region_RES-ORG_Mat
-- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_Mat
- RES-ORG@ACK
-- プログラム: /home/kamano/gitsrc/XMLOP/extract_region_RES-ORG.pl
-- スクリプト: grep ^ACK hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.Mark.E.S.L | awk -F '	' '{print $6}' | /home/kamano/gitsrc/XMLOP/extract_region_RES-ORG.pl > region_RES-ORG_ACK
-- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_ACK
- ORG-RES@Mat
-- プログラム: /home/kamano/gitsrc/XMLOP/extract_region_ORG-RES.pl
-- スクリプト: grep ^Mat hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.Mark.E.S.L | awk -F '	' '{print $6}' | /home/kamano/gitsrc/XMLOP/extract_region_ORG-RES.pl > region_ORG-RES_Mat
-- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_Mat
- ORG-RES@ACK
-- プログラム: /home/kamano/gitsrc/XMLOP/extract_region_ORG-RES.pl
-- スクリプト: grep ^ACK hit_ResOrg.tsv.color2.sel.html.work.moto-120151015.csv.ref.rev.Mark.E.S.L | awk -F '	' '{print $6}' | /home/kamano/gitsrc/XMLOP/extract_region_ORG-RES.pl > region_ORG-RES_ACK
-- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_ACK
##### 集計2.1 : RES-ORGまたはORG-RES間のterm(1W)集計
###### 集計2.1.1 : 句読点、カッコ類を残す
####### 集計2.1.1.1 : single term
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/
- RES-ORG@Mat
-- 対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_Mat
-- タグの除去: /home/kamano/gitsrc/XMLOP/drop_tag_RES-ORG.pl region_RES-ORG_Mat > region_RES-ORG_Mat.droptags
- RES-ORG@ACK
-- 対象:  /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_ACK
-- タグの除去: /home/kamano/gitsrc/XMLOP/drop_tag_RES-ORG.pl region_RES-ORG_ACK > region_RES-ORG_ACK.droptags
- ORG-RES@Mat
-- 対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_Mat
-- タグの除去: /home/kamano/gitsrc/XMLOP/drop_tag_RES-ORG.pl region_ORG-RES_Mat > region_ORG-RES_Mat.droptags
- ORG-RES@ACK
-- 対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_ACK
-- タグの除去: /home/kamano/gitsrc/XMLOP/drop_tag_RES-ORG.pl region_ORG-RES_ACK > region_ORG-RES_ACK.droptags
###### 集計2.1.2 : 句読点、カッコ類を落とす
####### 集計2.1.2.1 : ピリオド類カッコ類の除去
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/
- RES-ORG@Mat
-- スクリプト: /home/kamano/gitsrc/utility/drop_piriod_blk.pl region_RES-ORG_Mat.droptags > region_RES-ORG_Mat.droptags.drop1
- RES-ORG@ACK
-- スクリプト: /home/kamano/gitsrc/utility/drop_piriod_blk.pl region_RES-ORG_ACK.droptags > region_RES-ORG_ACK.droptags.drop1
- ORG-RES@Mat
-- スクリプト: /home/kamano/gitsrc/utility/drop_piriod_blk.pl region_ORG-RES_Mat.droptags > region_ORG-RES_Mat.droptags.drop1
- ORG-RES@ACK
-- スクリプト: /home/kamano/gitsrc/utility/drop_piriod_blk.pl region_ORG-RES_ACK.droptags > region_ORG-RES_ACK.droptags.drop1
##### 集計2.2 : RES-ORGまたはORG-RES間のワード集計
###### 集計2.2.1 : 句読点カッコ類を残す
####### 集計2.2.1.1 : RES-ORGまたはORG-RES間のワード集計:1term
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/
- RES-ORG@Mat
/home/kamano/gitsrc/utility/split_terms.pl region_RES-ORG_Mat.droptags | sort | uniq -c | sort -nr > region_RES-ORG_Mat.droptags.term
- RES-ORG@ACK
/home/kamano/gitsrc/utility/split_terms.pl region_RES-ORG_ACK.droptags | sort | uniq -c | sort -nr > region_RES-ORG_ACK.droptags.term
- ORG-RES@Mat
/home/kamano/gitsrc/utility/split_terms.pl region_ORG-RES_Mat.droptags | sort | uniq -c | sort -nr > region_ORG-RES_Mat.droptags.term
- ORG-RES@ACK
/home/kamano/gitsrc/utility/split_terms.pl region_ORG-RES_ACK.droptags | sort | uniq -c | sort -nr > region_ORG-RES_ACK.droptags.term
###### 集計2.2.2 : 句読点カッコ類を落とす
####### 集計2.2.2.1 : RES-ORGまたはORG-RES間のワード集計:1term
######## (1)カウント
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/
- RES-ORG@Mat
/home/kamano/gitsrc/utility/split_terms.pl region_RES-ORG_Mat.droptags.drop1 | sort | uniq -c | sort -nr > region_RES-ORG_Mat.droptags.drop1.term
- RES-ORG@ACK
/home/kamano/gitsrc/utility/split_terms.pl region_RES-ORG_ACK.droptags.drop1 | sort | uniq -c | sort -nr > region_RES-ORG_ACK.droptags.drop1.term
- ORG-RES@Mat
/home/kamano/gitsrc/utility/split_terms.pl region_ORG-RES_Mat.droptags.drop1 | sort | uniq -c | sort -nr > region_ORG-RES_Mat.droptags.drop1.term
- ORG-RES@ACK
/home/kamano/gitsrc/utility/split_terms.pl region_ORG-RES_ACK.droptags.drop1 | sort | uniq -c | sort -nr > region_ORG-RES_ACK.droptags.drop1.term
######## (2)RES-ORGまたはORG-RES間のワード集計:1term:region内の出現率と全体の出現確率の比に出現数をかけた値が高いtermから抽出
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/
- base
-- file: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Word_jour-ALL.sort.count
-- wordcount = <<"/BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Word_jour-ALL.count.wl";
-- wordcounttotal = Map[#[[1]]&,wordcount]//Tr
-- wordcountratio = Map[{#[[1]],#[[1]]/wordcounttotal//N,#[[2]]}&,wordcount]; 
-- Save["wordcountratio.wl",wordcountratio]
-- wordRule = Map[#[[3]]->{#[[1]],#[[2]]}&,wordcountratio];

- objectの変換
-- プログラム: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
-- スクリプト:
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
for file in *drop1.term; do /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl $file > $file.wl; done
######## (3)出現率比と出現の積が高い順に一般語を取り出す(候補term)。
- RES-ORG@Mat
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: Math
-- object: ROM=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_Mat.droptags.drop1.term.wl";
-- ROMvsWord format : {{ROMcount},word,{totalcount}} 
-- Save["ROMvsWord.wl",ROMvsWord]
-- ROMrate=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ROMvsWord]
-- ROMrateSel=Cases[ROMrate,x_/;NumberQ[x[[1]]]]
-- ROMrateSelSort=Sort[ROMrateSel,#1[[1]]>=#2[[1]]&]
-- Save["ROMrateSelSort.wl",ROMrateSelSort]
-- ROMrateSelProd=Map[{#[[1]] * #[[2]],#[[3]]}&,ROMrateSelSort]//Sort
-- 出現率比x出現: Save["ROMrateSelProd.wl",ROMrateSelProd]
-- 出現率比x出現x辞書出現: ROMrateSelProdDic = Map[If[DictionaryLookup[#[[2]]]!={},#,Null]&,ROMrateSelProd]
-- 候補term: Save["ROMrateSelProdDic.wl",ROMrateSelProdDic]
-- ROMrateSelProdDicTop = Cases[ROMrateSelProdDic, _List] // Reverse
-- Export["ROMrateSelProdDicTop.tsv", ROMrateSelProdDicTop]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- test = Map[checkPropernoun[#[[2]]]&,ROMrateSelProdDicTop]
--- delpos = Position[test,True]
--- ROMrateSelProdDicTopDelnoun = Delete[ROMrateSelProdDicTop,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ROMrateSelProdDicTopDelnoun] 
--- delpos = Position[test,False]
--- ROMrateSelProdDicTopDelnoun = Delete[ROMrateSelProdDicTopDelnoun,delpos]
--- Export["ROMrateSelProdDicTopDelnoun.tsv",ROMrateSelProdDicTopDelnoun]

- RES-ORG@ACK
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: Math
-- object: ROA=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_ACK.droptags.drop1.term.wl";
-- ROAtotal = Map[#[[1]]&,ROA]//Tr
-- ROAratio = Map[{#[[1]],#[[1]]/1286//N,#[[2]]}&,ROA]
-- ROAvsWord = Map[{{#[[1]],#[[2]]},#[[3]],#[[3]]/.wordD}&,ROAratio]
-- Save["ROAvsWord.wl",ROAvsWord]
-- ROArate=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ROAvsWord]
-- ROArateSel=Cases[ROArate,x_/;NumberQ[x[[1]]]]
-- ROArateSelSort=Sort[ROArateSel,#1[[1]]>=#2[[1]]&]
-- Save["ROArateSelSort.wl",ROArateSelSort]
-- ROArateSelProd=Map[{#[[1]] * #[[2]],#[[3]]}&,ROArateSelSort]//Sort
-- 出現率比x出現: Save["ROArateSelProd.wl",ROArateSelProd]
-- 出現率比x出現x辞書出現: ROArateSelProdDic = Map[If[DictionaryLookup[#[[2]]]!={},#,Null]&,ROArateSelProd]
-- 候補term: Save["ROArateSelProdDic.wl",ROArateSelProdDic]
-- ROArateSelProdDicTop = Cases[ROArateSelProdDic, _List] // Reverse
-- Export["ROArateSelProdDicTop.tsv", ROArateSelProdDicTop]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun, checkPropernoun
--- test = Map[checkPropernoun[#[[2]]]&,ROArateSelProdDicTop]
--- delpos = Position[test,True]
--- ROArateSelProdDicTopDelnoun = Delete[ROArateSelProdDicTop,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ROArateSelProdDicTopDelnoun] 
--- delpos = Position[test,False]
--- ROArateSelProdDicTopDelnoun = Delete[ROArateSelProdDicTopDelnoun,delpos]
--- Export["ROArateSelProdDicTopDelnoun.tsv",ROArateSelProdDicTopDelnoun]

- ORG-RES@Mat
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: Math
-- wordcountratio: <<"/BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/wordcountratio.wl"
-- wordRule = Map[#[[3]]->{#[[1]],#[[2]]}&,wordcountratio];
-- wordD = Dispatch[wordRule]
-- object: ORM=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_Mat.droptags.drop1.term.wl";
-- ORMtotal = Map[#[[1]]&,ORM]//Tr -> 1315
-- ORMratio = Map[{#[[1]],#[[1]]/1315//N,#[[2]]}&,ORM]
-- ORMvsWord = Map[{{#[[1]],#[[2]]},#[[3]],#[[3]]/.wordD}&,ORMratio]
-- Save["ORMvsWord.wl",ORMvsWord]
-- ORMrate=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ORMvsWord]
-- ORMrateSel=Cases[ORMrate,x_/;NumberQ[x[[1]]]]
-- ORMrateSelSort=Sort[ORMrateSel,#1[[1]]>=#2[[1]]&]
-- Save["ORMrateSelSort.wl",ORMrateSelSort]
-- ORMrateSelProd=Map[{#[[1]] * #[[2]],#[[3]]}&,ORMrateSelSort]//Sort
-- 出現率比x出現: Save["ORMrateSelProd.wl",ORMrateSelProd]
-- 出現率比x出現x辞書出現: ORMrateSelProdDic = Map[If[DictionaryLookup[#[[2]]]!={},#,Null]&,ORMrateSelProd]
-- 候補term: Save["ORMrateSelProdDic.wl",ORMrateSelProdDic]
-- ORMrateSelProdDicTop = Cases[ORMrateSelProdDic, _List] // Reverse
-- Export["ORMrateSelProdDicTop.tsv", ORMrateSelProdDicTop]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- test = Map[checkPropernoun[#[[2]]]&,ORMrateSelProdDicTop]
--- delpos = Position[test,True]
--- ORMrateSelProdDicTopDelnoun = Delete[ORMrateSelProdDicTop,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ORMrateSelProdDicTopDelnoun] 
--- delpos = Position[test,False]
--- ORMrateSelProdDicTopDelnoun = Delete[ORMrateSelProdDicTopDelnoun,delpos]
--- Export["ORMrateSelProdDicTopDelnoun.tsv",ORMrateSelProdDicTopDelnoun]

- ORG-RES@ACK
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- wordcountratio: <<"/BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/wordcountratio.wl"
-- wordRule = Map[#[[3]]->{#[[1]],#[[2]]}&,wordcountratio];
-- wordD = Dispatch[wordRule]
-- object: ORA=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_ACK.droptags.drop1.term.wl";
-- ORAtotal = Map[#[[1]]&,ORA]//Tr -> 1688
-- ORAratio = Map[{#[[1]],#[[1]]/1688//N,#[[2]]}&,ORA]
-- ORAvsWord = Map[{{#[[1]],#[[2]]},#[[3]],#[[3]]/.wordD}&,ORAratio]
-- Save["ORAvsWord.wl",ORAvsWord]
-- ORArate=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ORAvsWord]
-- ORArateSel=Cases[ORArate,x_/;NumberQ[x[[1]]]]
-- ORArateSelSort=Sort[ORArateSel,#1[[1]]>=#2[[1]]&]
-- Save["ORArateSelSort.wl",ORArateSelSort]
-- ORArateSelProd=Map[{#[[1]] * #[[2]],#[[3]]}&,ORArateSelSort]//Sort
-- 出現率比x出現: Save["ORArateSelProd.wl",ORArateSelProd]
-- 出現率比x出現x辞書出現: ORArateSelProdDic = Map[If[DictionaryLookup[#[[2]]]!={},#,Null]&,ORArateSelProd]
-- 候補term: Save["ORArateSelProdDic.wl",ORArateSelProdDic]
-- ORArateSelProdDicTop = Cases[ORArateSelProdDic, _List] // Reverse
-- Export["ORArateSelProdDicTop.tsv", ORArateSelProdDicTop]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- test = Map[checkPropernoun[#[[2]]]&,ORArateSelProdDicTop]
--- delpos = Position[test,True]
--- ORArateSelProdDicTopDelnoun = Delete[ORArateSelProdDicTop,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ORArateSelProdDicTopDelnoun] 
--- delpos = Position[test,False]
--- ORArateSelProdDicTopDelnoun = Delete[ORArateSelProdDicTopDelnoun,delpos]
--- Export["ORArateSelProdDicTopDelnoun.tsv",ORArateSelProdDicTopDelnoun]

####### 集計2.2.2.2 : RES-ORGまたはORG-RES間のワード集計:2term
######## (1)カウント
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/
- RES-ORG@Mat
-- /home/kamano/gitsrc/utility/split_phrase2W.pl region_RES-ORG_Mat.droptags.drop1 | sort | uniq -c | sort -nr > region_RES-ORG_Mat.droptags.drop1.2W
- RES-ORG@ACK
-- /home/kamano/gitsrc/utility/split_phrase2W.pl region_RES-ORG_ACK.droptags.drop1 | sort | uniq -c | sort -nr > region_RES-ORG_ACK.droptags.drop1.2W
- ORG-RES@Mat
-- /home/kamano/gitsrc/utility/split_phrase2W.pl region_ORG-RES_Mat.droptags.drop1 | sort | uniq -c | sort -nr > region_ORG-RES_Mat.droptags.drop1.2W
- ORG-RES@ACK
-- /home/kamano/gitsrc/utility/split_phrase2W.pl region_ORG-RES_ACK.droptags.drop1 | sort | uniq -c | sort -nr > region_ORG-RES_ACK.droptags.drop1.2W
######## (2)RES-ORGまたはORG-RES間のフレーズ(2W)集計:region内の出現率と全体の出現確率の比に出現数をかけた値が高い2termから抽出
- base
cd /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1
-- file: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.2W.sort.count
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Pcount_to_wl.pl /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.2W.sort.count > /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.2W.count.wl
-- math
--- sp=<<"/BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.2W.count.wl";
--- total2W=Map[#[[1]]&,sp]//Tr (*2866055366*)
--- phrasecountratio2W=Map[{#[[1]],#[[1]]/total2W//N,#[[2]]}&,sp];
--- Save["phrasecountratio2W.wl",phrasecountratio2W]
--- phraseRule2W = Map[#[[3]]->{#[[1]],#[[2]]}&,phrasecountratio2W];
######## (3)出現率比と出現の積が高い順に一般語を含むフレーズ(2W)取り出す(候補phrase)。
- RES-ORG@Mat
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: 
--- /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
--- math
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl region_RES-ORG_Mat.droptags.drop1.2W > region_RES-ORG_Mat.droptags.drop1.2W.wl
-- object: ROM=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_Mat.droptags.drop1.2W.wl";
-- ROMtotal = Map[#[[1]]&,ROM]//Tr (*5951*)
-- ROMvs2W=Map[{{#[[1]],#[[1]]/ROMtotal//N},#[[2]],#[[2]]/.DphraseRule2W}&, ROM]
--- ROMvs2W format : {{ROMcount},word,{totalcount}} 
-- ROMvs2Wsel = Cases[ROMvs2W,{{x_,y_},_String,{s_,t_}}/;NumberQ[x]&&NumberQ[y]&&NumberQ[s]&&NumberQ[t]]
-- Save["ROMvs2W.wl",ROMvs2Wsel]
-- ROMrate2W=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ROMvs2Wsel]
-- ROMrateSel2W=Cases[ROMrate2W,x_/;NumberQ[x[[1]]]]
-- ROMrateSelSort2W=Sort[ROMrateSel2W,#1[[1]]>=#2[[1]]&]
-- Save["ROMrateSelSort2W.wl",ROMrateSelSort2W]
-- ROMrateSelProd2W=Map[{#[[1]] * #[[2]],#[[3]]}&,ROMrateSelSort2W]//Sort
-- 出現率比x出現: Save["ROMrateSelProd2W.wl",ROMrateSelProd2W]
-- 出現率比x出現x辞書出現:
--- ROMrateSelProd2WSpl = Map[{#[[1]],StringSplit[#[[2]]]}&,ROMrateSelProd2W]
--- ROMrateSelProdDic2W = Map[If[DictionaryLookup[#[[2,1]]]!={}&&DictionaryLookup[#[[2,2]]]!={},#,Null]&,ROMrateSelProd2WSpl]
-- 候補term: Save["ROMrateSelProdDic2W.wl",ROMrateSelProdDic2W]
-- ROMrateSelProdDicTop2W = Cases[ROMrateSelProdDic2W, _List] // Reverse
-- ROMrateSelProdDicTop2WJ = Map[{#[[1]],#[[2,1]]<>" "<>#[[2,2]]}&,ROMrateSelProdDicTop2W]
-- Export["ROMrateSelProdDicTop2W.tsv", ROMrateSelProdDicTop2WJ]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun, checkPropernoun
--- test = Map[checkPropernoun[#[[2]]]&,ROMrateSelProdDicTop2WJ]
--- delpos = Position[test,True]
--- ROMrateSelProdDicTop2WJDelnoun = Delete[ROMrateSelProdDicTop2WJ,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ROMrateSelProdDicTop2WJDelnoun] 
--- delpos = Position[test,False]
--- ROMrateSelProdDicTop2WJDelnoun = Delete[ROMrateSelProdDicTop2WJDelnoun,delpos]
--- Export["ROMrateSelProdDicTop2WJDelnoun.tsv",ROMrateSelProdDicTop2WJDelnoun]

- RES-ORG@ACK
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: 
--- /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
--- math
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl region_RES-ORG_ACK.droptags.drop1.2W > region_RES-ORG_ACK.droptags.drop1.2W.wl
-- object: ROA=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_ACK.droptags.drop1.2W.wl";
-- ROAtotal = Map[#[[1]]&,ROA]//Tr (*847*)
-- ROAvs2W=Map[{{#[[1]],#[[1]]/ROAtotal//N},#[[2]],#[[2]]/.DphraseRule2W}&, ROA]
--- ROAvs2W format : {{ROAcount},word,{totalcount}} 
-- ROAvs2Wsel = Cases[ROAvs2W,{{x_,y_},_String,{s_,t_}}/;NumberQ[x]&&NumberQ[y]&&NumberQ[s]&&NumberQ[t]]
-- Save["ROAvs2W.wl",ROAvs2Wsel]
-- ROArate2W=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ROAvs2Wsel]
-- ROArateSel2W=Cases[ROArate2W,x_/;NumberQ[x[[1]]]]
-- ROArateSelSort2W=Sort[ROArateSel2W,#1[[1]]>=#2[[1]]&]
-- Save["ROArateSelSort2W.wl",ROArateSelSort2W]
-- ROArateSelProd2W=Map[{#[[1]] * #[[2]],#[[3]]}&,ROArateSelSort2W]//Sort
-- 出現率比x出現: Save["ROArateSelProd2W.wl",ROArateSelProd2W]
-- 出現率比x出現x辞書出現:
--- ROArateSelProd2WSpl = Map[{#[[1]],StringSplit[#[[2]]]}&,ROArateSelProd2W]
--- ROArateSelProdDic2W = Map[If[DictionaryLookup[#[[2,1]]]!={}&&DictionaryLookup[#[[2,2]]]!={},#,Null]&,ROArateSelProd2WSpl]
-- 候補term: Save["ROArateSelProdDic2W.wl",ROArateSelProdDic2W]
-- ROArateSelProdDicTop2W = Cases[ROArateSelProdDic2W, _List] // Reverse
-- ROArateSelProdDicTop2WJ = Map[{#[[1]],#[[2,1]]<>" "<>#[[2,2]]}&,ROArateSelProdDicTop2W]
-- Export["ROArateSelProdDicTop2W.tsv", ROArateSelProdDicTop2WJ]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- <<"/home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Dictionary_operations.txt"
--- test = Map[checkPropernoun[#[[2]]]&,ROArateSelProdDicTop2WJ]
--- delpos = Position[test,True]
--- ROArateSelProdDicTop2WJDelnoun = Delete[ROArateSelProdDicTop2WJ,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ROArateSelProdDicTop2WJDelnoun] 
--- delpos = Position[test,False]
--- ROArateSelProdDicTop2WJDelnoun = Delete[ROArateSelProdDicTop2WJDelnoun,delpos]
--- Export["ROArateSelProdDicTop2WJDelnoun.tsv",ROArateSelProdDicTop2WJDelnoun]

- ORG-RES@Mat
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program:
--- Math
--- /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl region_ORG-RES_Mat.droptags.drop1.2W > region_ORG-RES_Mat.droptags.drop1.2W.wl
-- object: ORM=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_Mat.droptags.drop1.2W.wl";
-- ORMtotal = Map[#[[1]]&,ORM]//Tr (*442*)
-- ORMvs2W=Map[{{#[[1]],#[[1]]/ORMtotal//N},#[[2]],#[[2]]/.DphraseRule2W}&, ORM]
--- ORMvs2W format : {{ORMcount},word,{totalcount}} 
-- ORMvs2Wsel = Cases[ORMvs2W,{{x_,y_},_String,{s_,t_}}/;NumberQ[x]&&NumberQ[y]&&NumberQ[s]&&NumberQ[t]]
-- Save["ORMvs2W.wl",ORMvs2Wsel]
-- ORMrate2W=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ORMvs2Wsel]
-- ORMrateSel2W=Cases[ORMrate2W,x_/;NumberQ[x[[1]]]]
-- ORMrateSelSort2W=Sort[ORMrateSel2W,#1[[1]]>=#2[[1]]&]
-- Save["ORMrateSelSort2W.wl",ORMrateSelSort2W]
-- ORMrateSelProd2W=Map[{#[[1]] * #[[2]],#[[3]]}&,ORMrateSelSort2W]//Sort
-- 出現率比x出現: Save["ORMrateSelProd2W.wl",ORMrateSelProd2W]
-- 出現率比x出現x辞書出現:
--- ORMrateSelProd2WSpl = Map[{#[[1]],StringSplit[#[[2]]]}&,ORMrateSelProd2W]
--- ORMrateSelProdDic2W = Map[If[DictionaryLookup[#[[2,1]]]!={}&&DictionaryLookup[#[[2,2]]]!={},#,Null]&,ORMrateSelProd2WSpl]
-- 候補term: Save["ORMrateSelProdDic2W.wl",ORMrateSelProdDic2W]
-- ORMrateSelProdDicTop2W = Cases[ORMrateSelProdDic2W, _List] // Reverse
-- ORMrateSelProdDicTop2WJ = Map[{#[[1]],#[[2,1]]<>" "<>#[[2,2]]}&,ORMrateSelProdDicTop2W]
-- Export["ORMrateSelProdDicTop2W.tsv", ORMrateSelProdDicTop2WJ]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- <<"/home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Dictionary_operations.txt"
--- test = Map[checkPropernoun[#[[2]]]&,ORMrateSelProdDicTop2WJ]
--- delpos = Position[test,True]
--- ORMrateSelProdDicTop2WJDelnoun = Delete[ORMrateSelProdDicTop2WJ,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ROMrateSelProdDicTop2WJDelnoun] 
--- delpos = Position[test,False]
--- ROMrateSelProdDicTop2WJDelnoun = Delete[ROMrateSelProdDicTop2WJDelnoun,delpos]
--- Export["ORMrateSelProdDicTop2WJDelnoun.tsv",ORMrateSelProdDicTop2WJDelnoun]

- ORG-RES@ACK
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program:
--- Math
--- /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl region_ORG-RES_ACK.droptags.drop1.2W > region_ORG-RES_ACK.droptags.drop1.2W.wl
-- object: ORA=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_ACK.droptags.drop1.2W.wl";
-- ORAtotal = Map[#[[1]]&,ORA]//Tr (*1163*)
-- ORAvs2W=Map[{{#[[1]],#[[1]]/ORAtotal//N},#[[2]],#[[2]]/.DphraseRule2W}&, ORA]
--- ORAvs2W format : {{ORAcount},word,{totalcount}} 
-- ORAvs2Wsel = Cases[ORAvs2W,{{x_,y_},_String,{s_,t_}}/;NumberQ[x]&&NumberQ[y]&&NumberQ[s]&&NumberQ[t]]
-- Save["ORAvs2W.wl",ORAvs2Wsel]
-- ORArate2W=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ORAvs2Wsel]
-- ORArateSel2W=Cases[ORArate2W,x_/;NumberQ[x[[1]]]]
-- ORArateSelSort2W=Sort[ORArateSel2W,#1[[1]]>=#2[[1]]&]
-- Save["ORArateSelSort2W.wl",ORArateSelSort2W]
-- ORArateSelProd2W=Map[{#[[1]] * #[[2]],#[[3]]}&,ORArateSelSort2W]//Sort
-- 出現率比x出現: Save["ORArateSelProd2W.wl",ORArateSelProd2W]
-- 出現率比x出現x辞書出現:
--- ORArateSelProd2WSpl = Map[{#[[1]],StringSplit[#[[2]]]}&,ORArateSelProd2W]
--- ORArateSelProdDic2W = Map[If[DictionaryLookup[#[[2,1]]]!={}&&DictionaryLookup[#[[2,2]]]!={},#,Null]&,ORArateSelProd2WSpl]
-- 候補term: Save["ORArateSelProdDic2W.wl",ORArateSelProdDic2W]
-- ORArateSelProdDicTop2W = Cases[ORArateSelProdDic2W, _List] // Reverse
-- ORArateSelProdDicTop2WJ = Map[{#[[1]],#[[2,1]]<>" "<>#[[2,2]]}&,ORArateSelProdDicTop2W]
-- Export["ORArateSelProdDicTop2W.tsv", ORArateSelProdDicTop2WJ]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- <<"/home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Dictionary_operations.txt"
--- test = Map[checkPropernoun[#[[2]]]&,ORArateSelProdDicTop2WJ]
--- delpos = Position[test,True]
--- ORArateSelProdDicTop2WJDelnoun = Delete[ORArateSelProdDicTop2WJ,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ORArateSelProdDicTop2WJDelnoun] 
--- delpos = Position[test,False]
--- ORArateSelProdDicTop2WJDelnoun = Delete[ORArateSelProdDicTop2WJDelnoun,delpos]
--- Export["ORArateSelProdDicTop2WJDelnoun.tsv",ORArateSelProdDicTop2WJDelnoun]

####### 集計2.2.2.3 : RES-ORGまたはORG-RES間のワード集計:3term
######## (1)カウント
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/
- RES-ORG@Mat
-- /home/kamano/gitsrc/utility/split_phrase3W.pl region_RES-ORG_Mat.droptags.drop1 | sort | uniq -c | sort -nr > region_RES-ORG_Mat.droptags.drop1.3W
- RES-ORG@ACK
-- /home/kamano/gitsrc/utility/split_phrase3W.pl region_RES-ORG_ACK.droptags.drop1 | sort | uniq -c | sort -nr > region_RES-ORG_ACK.droptags.drop1.3W
- ORG-RES@Mat
-- /home/kamano/gitsrc/utility/split_phrase3W.pl region_ORG-RES_Mat.droptags.drop1 | sort | uniq -c | sort -nr > region_ORG-RES_Mat.droptags.drop1.3W
- ORG-RES@ACK
-- /home/kamano/gitsrc/utility/split_phrase3W.pl region_ORG-RES_ACK.droptags.drop1 | sort | uniq -c | sort -nr > region_ORG-RES_ACK.droptags.drop1.3W
######## (2)RES-ORGまたはORG-RES間のフレーズ(3W)集計:region内の出現率と全体の出現確率の比に出現数をかけた値が高い3termから抽出
- base
cd /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1
-- file: /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.3W.sort.count
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Pcount_to_wl.pl /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.3W.sort.count > /BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.3W.count.wl
-- math
--- sp=<<"/BANK/PMC/20140724/terms/ELM_VAL_ALL/patt.1/Phrase_jour-ALL.3W.count.wl";
--- total3W=Map[#[[1]]&,sp]//Tr (*2411385356*)
--- phrasecountratio3W=Map[{#[[1]],#[[1]]/total3W//N,#[[2]]}&,sp];
--- Save["phrasecountratio3W.wl",phrasecountratio3W]
--- phraseRule3W = Map[#[[3]]->{#[[1]],#[[2]]}&,phrasecountratio3W];
######## (3)出現率比と出現の積が高い順に一般語を含むフレーズ(3W)取り出す(候補phrase)。
- RES-ORG@Mat
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: 
--- /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
--- math
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl region_RES-ORG_Mat.droptags.drop1.3W > region_RES-ORG_Mat.droptags.drop1.3W.wl
-- object: ROM=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_Mat.droptags.drop1.3W.wl";
-- ROMtotal = Map[#[[1]]&,ROM]//Tr (*5951*)
-- ROMvs3W=Map[{{#[[1]],#[[1]]/ROMtotal//N},#[[2]],#[[2]]/.DphraseRule3W}&, ROM]
--- ROMvs3W format : {{ROMcount},word,{totalcount}} 
-- ROMvs3Wsel = Cases[ROMvs3W,{{x_,y_},_String,{s_,t_}}/;NumberQ[x]&&NumberQ[y]&&NumberQ[s]&&NumberQ[t]]
-- Save["ROMvs3W.wl",ROMvs3Wsel]
-- ROMrate3W=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ROMvs3Wsel]
-- ROMrateSel3W=Cases[ROMrate3W,x_/;NumberQ[x[[1]]]]
-- ROMrateSelSort3W=Sort[ROMrateSel3W,#1[[1]]>=#2[[1]]&]
-- Save["ROMrateSelSort3W.wl",ROMrateSelSort3W]
-- ROMrateSelProd3W=Map[{#[[1]] * #[[2]],#[[3]]}&,ROMrateSelSort3W]//Sort
-- 出現率比x出現: Save["ROMrateSelProd3W.wl",ROMrateSelProd3W]
-- 出現率比x出現x辞書出現:
--- ROMrateSelProd3WSpl = Map[{#[[1]],StringSplit[#[[2]]]}&,ROMrateSelProd3W]
--- ROMrateSelProdDic3W = Map[If[ DictionaryLookup[#[[2,1]]]!={} && DictionaryLookup[#[[2,2]]]!={} && DictionaryLookup[#[[2,3]]]!={}, #, Null]&, ROMrateSelProd3WSpl]
-- 候補term: Save["ROMrateSelProdDic3W.wl",ROMrateSelProdDic3W]
-- ROMrateSelProdDicTop3W = Cases[ROMrateSelProdDic3W, _List] // Reverse
-- ROMrateSelProdDicTop3WJ = Map[{#[[1]],#[[2,1]]<>" "<>#[[2,2]]<>" "<>#[[2,3]]}&,ROMrateSelProdDicTop3W]
-- Export["ROMrateSelProdDicTop3W.tsv", ROMrateSelProdDicTop3WJ]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- <<"/home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Dictionary_operations.txt"
--- test = Map[checkPropernoun[#[[2]]]&,ROMrateSelProdDicTop3WJ]
--- delpos = Position[test,True]
--- ROMrateSelProdDicTop3WJDelnoun = Delete[ROMrateSelProdDicTop3WJ,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ROMrateSelProdDicTop3WJDelnoun] 
--- delpos = Position[test,False]
--- ROMrateSelProdDicTop3WJDelnoun = Delete[ROMrateSelProdDicTop3WJDelnoun,delpos]
--- Export["ROMrateSelProdDicTop3WJDelnoun.tsv",ROMrateSelProdDicTop3WJDelnoun]

- RES-ORG@ACK
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: 
--- /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
--- math
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl region_RES-ORG_ACK.droptags.drop1.3W > region_RES-ORG_ACK.droptags.drop1.3W.wl
-- object: ROA=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_RES-ORG_ACK.droptags.drop1.3W.wl";
-- DphraseRule3W = Dispatch[phraseRule3W]
-- ROAtotal = Map[#[[1]]&,ROA]//Tr (*847*)
-- ROAvs3W=Map[{{#[[1]],#[[1]]/ROAtotal//N},#[[2]],#[[2]]/.DphraseRule3W}&, ROA]
--- ROAvs3W format : {{ROAcount},word,{totalcount}} 
-- ROAvs3Wsel = Cases[ROAvs3W,{{x_,y_},_String,{s_,t_}}/;NumberQ[x]&&NumberQ[y]&&NumberQ[s]&&NumberQ[t]]
-- Save["ROAvs3W.wl",ROAvs3Wsel]
-- ROArate3W=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ROAvs3Wsel]
-- ROArateSel3W=Cases[ROArate3W,x_/;NumberQ[x[[1]]]]
-- ROArateSelSort3W=Sort[ROArateSel3W,#1[[1]]>=#2[[1]]&]
-- Save["ROArateSelSort3W.wl",ROArateSelSort3W]
-- ROArateSelProd3W=Map[{#[[1]] * #[[2]],#[[3]]}&,ROArateSelSort3W]//Sort
-- 出現率比x出現: Save["ROArateSelProd3W.wl",ROArateSelProd3W]
-- 出現率比x出現x辞書出現:
--- ROArateSelProd3WSpl = Map[{#[[1]],StringSplit[#[[2]]]}&,ROArateSelProd3W]
--- ROArateSelProdDic3W = Map[If[ DictionaryLookup[#[[2,1]]]!={} && DictionaryLookup[#[[2,2]]]!={} && DictionaryLookup[#[[2,3]]]!={}, #, Null]&, ROArateSelProd3WSpl]
-- 候補term: Save["ROArateSelProdDic3W.wl",ROArateSelProdDic3W]
-- ROArateSelProdDicTop3W = Cases[ROArateSelProdDic3W, _List] // Reverse
-- ROArateSelProdDicTop3WJ = Map[{#[[1]],#[[2,1]]<>" "<>#[[2,2]]<>" "<>#[[2,3]]}&,ROArateSelProdDicTop3W]
-- Export["ROArateSelProdDicTop3W.tsv", ROArateSelProdDicTop3WJ]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- <<"/home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Dictionary_operations.txt"
--- test = Map[checkPropernoun[#[[2]]]&,ROArateSelProdDicTop3WJ]
--- delpos = Position[test,True]
--- ROArateSelProdDicTop3WJDelnoun = Delete[ROArateSelProdDicTop3WJ,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ROArateSelProdDicTop3WJDelnoun] 
--- delpos = Position[test,False]
--- ROArateSelProdDicTop3WJDelnoun = Delete[ROArateSelProdDicTop3WJDelnoun,delpos]
--- Export["ROArateSelProdDicTop3WJDelnoun.tsv",ROArateSelProdDicTop3WJDelnoun]

- ORG-RES@Mat
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: 
--- /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
--- math
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl region_ORG-RES_Mat.droptags.drop1.3W > region_ORG-RES_Mat.droptags.drop1.3W.wl
-- object: ORM=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_Mat.droptags.drop1.3W.wl";
-- ORMtotal = Map[#[[1]]&,ORM]//Tr (*442*)
-- ORMvs3W=Map[{{#[[1]],#[[1]]/ORMtotal//N},#[[2]],#[[2]]/.DphraseRule3W}&, ORM]
--- ORMvs3W format : {{ORMcount},word,{totalcount}} 
-- ORMvs3Wsel = Cases[ORMvs3W,{{x_,y_},_String,{s_,t_}}/;NumberQ[x]&&NumberQ[y]&&NumberQ[s]&&NumberQ[t]]
-- Save["ORMvs3W.wl",ORMvs3Wsel]
-- ORMrate3W=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ORMvs3Wsel]
-- ORMrateSel3W=Cases[ORMrate3W,x_/;NumberQ[x[[1]]]]
-- ORMrateSelSort3W=Sort[ORMrateSel3W,#1[[1]]>=#2[[1]]&]
-- Save["ORMrateSelSort3W.wl",ORMrateSelSort3W]
-- ORMrateSelProd3W=Map[{#[[1]] * #[[2]],#[[3]]}&,ORMrateSelSort3W]//Sort
-- 出現率比x出現: Save["ORMrateSelProd3W.wl",ORMrateSelProd3W]
-- 出現率比x出現x辞書出現:
--- ORMrateSelProd3WSpl = Map[{#[[1]],StringSplit[#[[2]]]}&,ORMrateSelProd3W]
--- ORMrateSelProdDic3W = Map[If[ DictionaryLookup[#[[2,1]]]!={} && DictionaryLookup[#[[2,2]]]!={} && DictionaryLookup[#[[2,3]]]!={}, #, Null]&, ORMrateSelProd3WSpl]
-- 候補term: Save["ORMrateSelProdDic3W.wl",ORMrateSelProdDic3W]
-- ORMrateSelProdDicTop3W = Cases[ORMrateSelProdDic3W, _List] // Reverse
-- ORMrateSelProdDicTop3WJ = Map[{#[[1]],#[[2,1]]<>" "<>#[[2,2]]<>" "<>#[[2,3]]}&,ORMrateSelProdDicTop3W]
-- Export["ORMrateSelProdDicTop3W.tsv", ORMrateSelProdDicTop3WJ]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- <<"/home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Dictionary_operations.txt"
--- test = Map[checkPropernoun[#[[2]]]&,ORMrateSelProdDicTop3WJ]
--- delpos = Position[test,True]
--- ORMrateSelProdDicTop3WJDelnoun = Delete[ORMrateSelProdDicTop3WJ,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ORMrateSelProdDicTop3WJDelnoun] 
--- delpos = Position[test,False]
--- ORMrateSelProdDicTop3WJDelnoun = Delete[ORMrateSelProdDicTop3WJDelnoun,delpos]
--- Export["ORMrateSelProdDicTop3WJDelnoun.tsv",ORMrateSelProdDicTop3WJDelnoun]

- ORG-RES@ACK
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
-- program: 
--- /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl
--- math
-- wlに変換: /home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/count_to_wl.pl region_ORG-RES_ACK.droptags.drop1.3W > region_ORG-RES_ACK.droptags.drop1.3W.wl
-- object: ORA=<<"/BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/region_ORG-RES_ACK.droptags.drop1.3W.wl";
-- ORAtotal = Map[#[[1]]&,ORA]//Tr (*1163*)
-- ORAvs3W=Map[{{#[[1]],#[[1]]/ORAtotal//N},#[[2]],#[[2]]/.DphraseRule3W}&, ORA]
--- ORAvs3W format : {{ORAcount},word,{totalcount}} 
-- ORAvs3Wsel = Cases[ORAvs3W,{{x_,y_},_String,{s_,t_}}/;NumberQ[x]&&NumberQ[y]&&NumberQ[s]&&NumberQ[t]]
-- Save["ORAvs3W.wl",ORAvs3Wsel]
-- ORArate3W=Map[{#[[1,2]]/#[[3,2]],#[[1,1]],#[[2]]}&,ORAvs3Wsel]
-- ORArateSel3W=Cases[ORArate3W,x_/;NumberQ[x[[1]]]]
-- ORArateSelSort3W=Sort[ORArateSel3W,#1[[1]]>=#2[[1]]&]
-- Save["ORArateSelSort3W.wl",ORArateSelSort3W]
-- ORArateSelProd3W=Map[{#[[1]] * #[[2]],#[[3]]}&,ORArateSelSort3W]//Sort
-- 出現率比x出現: Save["ORArateSelProd3W.wl",ORArateSelProd3W]
-- 出現率比x出現x辞書出現:
--- ORArateSelProd3WSpl = Map[{#[[1]],StringSplit[#[[2]]]}&,ORArateSelProd3W]
--- ORArateSelProdDic3W = Map[If[ DictionaryLookup[#[[2,1]]]!={} && DictionaryLookup[#[[2,2]]]!={} && DictionaryLookup[#[[2,3]]]!={}, #, Null]&, ORArateSelProd3WSpl]
-- 候補term: Save["ORArateSelProdDic3W.wl",ORArateSelProdDic3W]
-- ORArateSelProdDicTop3W = Cases[ORArateSelProdDic3W, _List] // Reverse
-- ORArateSelProdDicTop3WJ = Map[{#[[1]],#[[2,1]]<>" "<>#[[2,2]]<>" "<>#[[2,3]]}&,ORArateSelProdDicTop3W]
-- Export["ORArateSelProdDicTop3W.tsv", ORArateSelProdDicTop3WJ]
-- 固有名詞のdrop:品詞がNoneの可能性があり、かつ、大文字で始まるtermを含むphraseをdrop
--- 関数: partsofspeech, isCapital, containNoun
--- <<"/home/kamano/gitsrc/MATH_SCRIPT/SCRIPTS/Dictionary_operations.txt"
--- test = Map[checkPropernoun[#[[2]]]&,ORArateSelProdDicTop3WJ]
--- delpos = Position[test,True]
--- ORArateSelProdDicTop3WJDelnoun = Delete[ORArateSelProdDicTop3WJ,delpos]
-- さらにWordDataにある:
--- test = Map[existWordAll[#[[2]]]&,ORArateSelProdDicTop3WJDelnoun] 
--- delpos = Position[test,False]
--- ORArateSelProdDicTop3WJDelnoun = Delete[ORArateSelProdDicTop3WJDelnoun,delpos]
--- Export["ORArateSelProdDicTop3WJDelnoun.tsv",ORArateSelProdDicTop3WJDelnoun]
########===20160901===########



##TASK(2.2)[2](ペンディング) バイオリソース名の前後の出現文字(単語)パターンより正解バイオリソースかを判定(20150911)
###TASK(2.2.1) in ACK
- 対象: /BANK/PMC/20140724/elements/acknowledgement/PMC-ACK-v6.tsv.contOnly
- 検索タームリスト(ncr,escaped): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr.esc
- プログラム: /home/kamano/gitsrc/utility/extract_term_tspan.Ppl
- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/match_ResSpan_ACK.sh
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/match_ResSpan_ACK
-- リソース名無名化プログラム: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/extract_patt.pl
###TASK(2.2.2) in Mat #時間がかかる; 1article / 0.5min
- 対象: /BANK/PMC/20140724/elements/MERGED/allmaterials/*.contOnly
- 検索タームリスト(ncr,escaped): /BANK/BioResource/Organization/NBRP_2015/user-data/resterms.sort.uniq.select_5.ncr.esc
- プログラム: /home/kamano/gitsrc/utility/extract_term_tspan.Ppl
- スクリプト[local]: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/match_ResSpan_Mat.a[pqr].sh
- スクリプト[hokusai]: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/hokusai/term+span.au.sh
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/match_ResSpan_Mat.au
##TASK(2.3)[3] 機関名の前後の出現文字(単語)パターンのまとめ (20150915)
###TASK(2.3.1) in ACK
- 対象: /BANK/PMC/20140724/elements/acknowledgement/PMC-ACK-v6.tsv.contOnly
- 検索ターム: /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq.esc
- プログラム: /home/kamano/gitsrc/utility/extract_phrase_tspan.Ppl
- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/match_OrgSpan_ACK.sh
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/match_OrgSpan_ACK
###TASK(2.3.2) in Mat
- 対象: /BANK/PMC/20140724/elements/MERGED/allmaterials/allmaterials.au.reg.contOnly
- 検索ターム: /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq.esc
- プログラム: /home/kamano/gitsrc/utility/extract_phrase_tspan.Ppl
- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/exec_command/match_OrgSpan_Mat.au.sh
- 結果: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/match_OrgSpan_Mat.au



#TASK(3): 評価対象機関名拡張(/BANK/PMC/20140724/elements/aff)
#aff領域より得られた機関名(住所つき)をmaterial、ack領域に対して検索、存在を確認。
#所属をカンマで区切り、各フレーズを対象領域に対してマッチング。
#<tag1>,<tag2>,<tag3>
- 各ファイル:
-- 作業手順ファイル(20150625): /BANK/PMC/20140724/elements/aff/PMC-AFF作業手順メモ.utf8
-- 所属領域抽出結果: /BANK/PMC/20140724/elements/aff/PMC-AFF-v1.tsv
-- 所属抽出結果より不要なタグ等を取り除きユニークソート: /BANK/PMC/20140724/elements/aff/PMC-AFF-plain-v4
-- 上記データをカンマ区切りで切り出した第2カラムのデータ: /BANK/PMC/20140724/elements/aff/PMC-AFF-tag2
-- 上記各ファイルの解説: /BANK/PMC/20140724/elements/aff/README.Gmail(2015-03-14).pdf
##TASK(3.1): (ACK) 機関名候補検索 in 謝辞 (20150508)
### 謝辞 vs. tag1, tag2 and tag3 (石川氏)
- ヒット結果（ゴミ含む）: /BANK/PMC/20140724/elements/aff/AFFvsACK/AFFvsACK.log-tagALL-uniqsort
- 大文字小文字スペース以外を含むフレーズファイル: /BANK/PMC/20140724/elements/aff/WIKIvsAFFvsACK+MAT/tokusyu-list/AFFvsACK.log-tagALL-tokusyu-list
### 機関名候補のwiki見出し語による確認
- 結果ファイル(20150625): /BANK/PMC/20140724/elements/aff/WIKIvsAFFvsACK/AFFvsACK.log-tagALL-wikifilterd
### 手作業によるさらなるセレクション
- ディレクトリ移動: cd /BANK/PMC/20140724/elements/aff/WIKIvsAFFvsACK
- スクリプト: grep -v -E '> [a-zA-Z][a-z]+$' AFFvsACK.log-tagALL-wikifilterd > AFFvsACK.log-tagALL-wikifilterd.select_1
- スクリプト: grep -v -E '> [a-zA-Z0-9][a-zA-Z0-9]$' AFFvsACK.log-tagALL-wikifilterd.select_1 > AFFvsACK.log-tagALL-wikifilterd.select_2
- スクリプト: grep -v -E '> [a-zA-Z][a-z0-9]+$' AFFvsACK.log-tagALL-wikifilterd.select_2 > AFFvsACK.log-tagALL-wikifilterd.select_3
- 結果: /BANK/PMC/20140724/elements/aff/WIKIvsAFFvsACK/AFFvsACK.log-tagALL-wikifilterd.select_3
- 件数(ドキュメント): 22530
##TASK(3.2): (Mat)  機関名候補検索 in  材料 (20150508)
### 材料 vs. tag1, tag2 and tag3 (石川氏)
- ヒット結果（ゴミ含む）: /BANK/PMC/20140724/elements/aff/AFFvsMAT/AFFvsMAT.log-tagALL-uniqsort
- 大文字小文字スペース以外を含むフレーズファイル: /BANK/PMC/20140724/elements/aff/WIKIvsAFFvsACK+MAT/tokusyu-list/AFFvsMAT.log-tagALL-tokusyu-list
### 機関名候補のwiki見出し語による確認
- 結果ファイル(20150625): /BANK/PMC/20140724/elements/aff/WIKIvsAFFvsMAT/AFFvsMAT.log-tagALL-wikifilterd
### 手作業によるさらなるセレクション
- ディレクトリ移動: cd /BANK/PMC/20140724/elements/aff/WIKIvsAFFvsMAT/
- スクリプト: grep -v -E '> [a-zA-Z][a-z]+$' AFFvsMAT.log-tagALL-wikifilterd > AFFvsMAT.log-tagALL-wikifilterd.select_1
- スクリプト: grep -v -E '> [a-zA-Z0-9][a-zA-Z0-9]$' AFFvsMAT.log-tagALL-wikifilterd.select_1 > AFFvsMAT.log-tagALL-wikifilterd.select_2
- スクリプト: grep -v -E '> [a-zA-Z][a-z0-9]+$' AFFvsMAT.log-tagALL-wikifilterd.select_2 > AFFvsMAT.log-tagALL-wikifilterd.select_3
- 結果: /BANK/PMC/20140724/elements/aff/WIKIvsAFFvsMAT/AFFvsMAT.log-tagALL-wikifilterd.select_3
- 件数(ドキュメント): 19091



#TASK(4) パターン検索によるコレクションの拡張
##TASK(4.1) NBRPセレクションの拡張
###TASK(4.1.1) NBRP-ACKセレクションの拡張
#### タグの挿入
- 拡張される対象: リソース
- 検索対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv
- 検索機関名:
-- 機関名部分にタグ挿入<ORG>...</ORG>
--- 機関名リスト(perl用エスケープ)(NBRP-ORG-Perlコレクション): /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq.esc
--- スクリプト(insTagORG_ACK.sh): ./insTag-ORG_to_html.pl /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq.esc > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv.Tag-ORG
--- ORGタグ挿入コンテンツ: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv.Tag-ORG
- 検索フレーズパターン:
-- 機関名部分に加え、フレーズ部分にタグ挿入
--- ORArateSelProdDicTopDelnoun.tsv.sel
---- /home/kamano/gitsrc/XMLOP/insTag-KW_to_html.pl /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv.Tag-ORG /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/ORArateSelProdDicTopDelnoun.tsv.sel  W > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_Org_from_ACK.tsv.ORA.Tag-ORG+W
--- ORArateSelProdDicTop2WJDelnoun.tsv.sel
---- /home/kamano/gitsrc/XMLOP/insTag-KW_to_html.pl /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv.Tag-ORG /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/ORArateSelProdDicTop2WJDelnoun.tsv.sel  2W > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_Org_from_ACK.tsv.ORA.Tag-ORG+2W
--- ORArateSelProdDicTop3WJDelnoun.tsv.sel
---- /home/kamano/gitsrc/XMLOP/insTag-KW_to_html.pl /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv.Tag-ORG /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/ORArateSelProdDicTop3WJDelnoun.tsv.sel  3W > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_Org_from_ACK.tsv.ORA.Tag-ORG+3W
--- ROArateSelProdDicTopDelnoun.tsv.sel
---- /home/kamano/gitsrc/XMLOP/insTag-KW_to_html.pl /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv.Tag-ORG /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/ROArateSelProdDicTopDelnoun.tsv.sel  W > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_Org_from_ACK.tsv.ROA.Tag-ORG+W
--- ROArateSelProdDicTop2WJDelnoun.tsv.sel
---- /home/kamano/gitsrc/XMLOP/insTag-KW_to_html.pl /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv.Tag-ORG /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/ROArateSelProdDicTop2WJDelnoun.tsv.sel 2W > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_Org_from_ACK.tsv.ROA.Tag-ORG+2W
--- ROArateSelProdDicTop3WJDelnoun.tsv.sel
---- /home/kamano/gitsrc/XMLOP/insTag-KW_to_html.pl /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_ACK.tsv.Tag-ORG /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/ROArateSelProdDicTop3WJDelnoun.tsv.sel 3W > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/hit_Org_from_ACK.tsv.ROA.Tag-ORG+3W
- CRC@ACK論文数:
[kamano@n007 doc]$ grep '<ORG>' *+*W | grep '<3W>\|<2W>\|<W>' | wc
  16008 1509343 14340979
#### センテンスのsplit => splitTagの挿入
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
- 対象: hit*ACK*W
- program: /home/kamano/gitsrc/XMLOP/ins_sentence-split.pl
- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/exec_command/insTagSP_ACK.sh
- 結果: hit*ACK*W.spl
#### センテンスのセレクション: RES-Phrase-ORG-spl
- program: extract_RES-Phrase-ORG-spl.pl
####===いまここ===####
###TASK(4.1.2) NBRP-Matセレクションの拡張(リソース)
#### タグの挿入
- 拡張される対象: リソース
- 検索対象: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_Mat.au.tsv
- 検索機関名:
-- 機関名部分にタグ挿入<ORG>...</ORG>
--- 機関名リスト(perl用エスケープ)(NBRP-ORG-Perlコレクション): /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq.esc
---- スクリプト(insTagORG_Mat.sh): /home/kamano/gitsrc/XMLOP/insTag-ORG_to_html.pl /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_Mat.au.tsv /BANK/Organization/NBRP_2015/17topOrgNameSearchTerm.txt.sort.uniq.esc > /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_Mat.au.tsv.Tag-ORG
---- ORGタグ挿入コンテンツ: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/hit_Org_from_Mat.au.tsv.Tag-ORG
- 検索フレーズパターン:
-- 機関名部分に加え、フレーズ部分にタグ挿入
--- ORMrateSelProdDicTopDelnoun.tsv.sel
---- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/exec_command/insTagW_Mat.ORM.sh
--- ORMrateSelProdDicTop2WJDelnoun.tsv.sel
---- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/exec_command/insTag2W_Mat.ORM.sh
--- ORMrateSelProdDicTop3WJDelnoun.tsv.sel
---- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/exec_command/insTag2W_Mat.ORM.sh
--- ROMrateSelProdDicTopDelnoun.tsv.sel
---- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/exec_command/insTagW_Mat.ROM.sh
--- ROMrateSelProdDicTop2WJDelnoun.tsv.sel
---- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/exec_command/insTag2W_Mat.ROM.sh
--- ROMrateSelProdDicTop3WJDelnoun.tsv.sel
---- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/exec_command/insTag3W_Mat.ROM.sh
- CRC@Mat論文数:
[kamano@n007 doc]$ grep '<ORG>'  hit_Org_from_Mat*W | grep '<3W>\|<2W>\|<W>' | wc
  21779 32101107 318564486
#### センテンスのsplit => splitTagの挿入
cd /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc
- 対象: hit*Mat*W
- program: /home/kamano/gitsrc/XMLOP/ins_sentence-split.pl
- スクリプト: /BANK/PMC/20140724/Matching/BioResource/Organization/NBRP_2015/doc/exec_command/insTagSP_Mat.sh
- 結果: hit*Mat*W.spl

